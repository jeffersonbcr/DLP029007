
testing_lcd_niosii.elf:     file format elf32-littlenios2
testing_lcd_niosii.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010238

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000021ec memsz 0x000021ec flags r-x
    LOAD off    0x0000320c vaddr 0x0001220c paddr 0x0001251c align 2**12
         filesz 0x00000310 memsz 0x00000310 flags rw-
    LOAD off    0x0000382c vaddr 0x0001282c paddr 0x0001282c align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001f64  00010238  00010238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  0001219c  0001219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000310  0001220c  0001251c  0000320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  0001282c  0001282c  0000382c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00012950  00012950  0000351c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000578  00000000  00000000  00003550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00005d55  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002493  00000000  00000000  0000981d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00002d8a  00000000  00000000  0000bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000b80  00000000  00000000  0000ea3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001b86  00000000  00000000  0000f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000009b8  00000000  00000000  00011142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000060  00000000  00000000  00011afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000190  00000000  00000000  00011b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000137ea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000137ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000137f0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000137f1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000137f2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000137fb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00013804  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  0001380d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0001381c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c75  00000000  00000000  0001384c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004f25d  00000000  00000000  000184c1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010238 l    d  .text	00000000 .text
0001219c l    d  .rodata	00000000 .rodata
0001220c l    d  .rwdata	00000000 .rwdata
0001282c l    d  .bss	00000000 .bss
00012950 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testing_lcd_niosii_bsp//obj/HAL/src/crt0.o
00010280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
0001282c l     O .bss	00000001 count
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
000103f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010580 l     F .text	00000034 alt_dev_reg
0001220c l     O .rwdata	0000002c jtag_uart
00012238 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010894 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00010fe8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011140 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001116c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000115ac l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000116d8 l     F .text	0000003c alt_get_errno
00011714 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
0001240c l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012848 g     O .bss	00000004 alt_instruction_exception_handler
000104e4 g     F .text	0000006c alt_main
00012850 g     O .bss	00000100 alt_irq
0001251c g       *ABS*	00000000 __flash_rwdata_start
00010a08 g     F .text	00000040 alt_up_character_lcd_send_cmd
00011b24 g     F .text	00000024 altera_nios2_gen2_irq_init
00010994 g     F .text	00000074 get_DDRAM_addr
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001284c g     O .bss	00000004 errno
00012834 g     O .bss	00000004 alt_argv
0001a4f0 g       *ABS*	00000000 _gp
00010550 g     F .text	00000030 usleep
0001228c g     O .rwdata	00000180 alt_fd_list
00011250 g     F .text	00000090 alt_find_dev
000103d0 g     F .text	00000028 memcpy
00010bb8 g     F .text	00000050 alt_up_character_lcd_write_fd
0001165c g     F .text	0000007c alt_io_redirect
00011d80 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00010714 g     F .text	000000ec altera_avalon_jtag_uart_read
000120a4 g     F .text	00000064 .hidden __udivsi3
00011cf0 g     F .text	00000090 alt_icache_flush
00012500 g     O .rwdata	00000004 alt_max_fd
00012514 g     O .rwdata	00000004 _global_impure_ptr
00012950 g       *ABS*	00000000 __bss_end
000114c4 g     F .text	000000e8 alt_iic_isr_register
00011a1c g     F .text	00000108 alt_tick
00011478 g     F .text	0000004c alt_ic_irq_enabled
00011978 g     F .text	000000a4 alt_alarm_stop
0001283c g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100fc g     F .exceptions	000000c8 alt_irq_handler
00012264 g     O .rwdata	00000028 alt_dev_null
00010e58 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
000110f4 g     F .text	0000004c alt_dcache_flush_all
0001251c g       *ABS*	00000000 __ram_rwdata_end
000124f8 g     O .rwdata	00000008 alt_dev_list
0001220c g       *ABS*	00000000 __ram_rodata_end
00012108 g     F .text	0000005c .hidden __umodsi3
00012950 g       *ABS*	00000000 end
000101c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010910 g     F .text	00000084 alt_avalon_timer_sc_init
00010800 g     F .text	00000094 altera_avalon_jtag_uart_write
00010abc g     F .text	00000080 alt_up_character_lcd_write
00011e84 g     F .text	0000012c __call_exitprocs
00010238 g     F .text	0000004c _start
00012840 g     O .bss	00000004 _alt_tick_rate
00012844 g     O .bss	00000004 _alt_nticks
000105f0 g     F .text	00000064 alt_sys_init
00010d08 g     F .text	0000008c alt_up_character_lcd_shift_display
00010d94 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001220c g       *ABS*	00000000 __ram_rwdata_start
0001219c g       *ABS*	00000000 __ram_rodata_start
00010654 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011c50 g     F .text	000000a0 alt_get_fd
00010e90 g     F .text	00000158 alt_busy_sleep
00011e38 g     F .text	00000030 memcmp
00012950 g       *ABS*	00000000 __alt_stack_base
00011b48 g     F .text	00000108 alt_find_file
000111a8 g     F .text	000000a8 alt_dev_llist_insert
0001282c g       *ABS*	00000000 __bss_start
00010284 g     F .text	0000014c main
00012838 g     O .bss	00000004 alt_envp
000106b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010c7c g     F .text	0000008c alt_up_character_lcd_shift_cursor
00012504 g     O .rwdata	00000004 alt_errno
00011fb0 g     F .text	00000080 .hidden __divsi3
00010a80 g     F .text	0000003c alt_up_character_lcd_open_dev
00010a48 g     F .text	00000038 alt_up_character_lcd_init
0001219c g       *ABS*	00000000 __flash_rodata_start
000105b4 g     F .text	0000003c alt_irq_init
00011920 g     F .text	00000058 alt_release_fd
00010e20 g     F .text	00000038 alt_up_character_lcd_cursor_off
00012518 g     O .rwdata	00000004 _impure_ptr
00012830 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000124f0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011314 g     F .text	00000050 alt_ic_isr_register
0001251c g       *ABS*	00000000 _edata
00012950 g       *ABS*	00000000 _end
00010238 g       *ABS*	00000000 __ram_exceptions_end
000113ec g     F .text	0000008c alt_ic_irq_disable
00011e18 g     F .text	00000020 exit
00012030 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010b3c g     F .text	0000007c alt_up_character_lcd_string
00012164 g     F .text	00000038 _exit
00011e68 g     F .text	0000001c strlen
000117cc g     F .text	00000154 open
000112e0 g     F .text	00000034 alt_icache_flush_all
00010c08 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00012508 g     O .rwdata	00000004 alt_priority_mask
00011364 g     F .text	00000088 alt_ic_irq_enable
0001250c g     O .rwdata	00000008 alt_alarm_list
00011024 g     F .text	000000d0 close
00010460 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08408e14 	ori	at,at,568
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	00800074 	movhi	r2,1
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10ca1417 	ldw	r3,10320(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	00800074 	movhi	r2,1
   1015c:	2085883a 	add	r2,r4,r2
   10160:	108a1517 	ldw	r2,10324(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101d8:	000531fa 	rdctl	r2,exception
   101dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101e0:	e0bfff17 	ldw	r2,-4(fp)
   101e4:	1004d0ba 	srli	r2,r2,2
   101e8:	108007cc 	andi	r2,r2,31
   101ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101f0:	0005333a 	rdctl	r2,badaddr
   101f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f8:	d0a0d617 	ldw	r2,-31912(gp)
   101fc:	10000726 	beq	r2,zero,1021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10200:	d0a0d617 	ldw	r2,-31912(gp)
   10204:	e0ffff17 	ldw	r3,-4(fp)
   10208:	e1bffe17 	ldw	r6,-8(fp)
   1020c:	e17ffd17 	ldw	r5,-12(fp)
   10210:	1809883a 	mov	r4,r3
   10214:	103ee83a 	callr	r2
   10218:	00000206 	br	10224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10220:	0005883a 	mov	r2,zero
}
   10224:	e037883a 	mov	sp,fp
   10228:	dfc00117 	ldw	ra,4(sp)
   1022c:	df000017 	ldw	fp,0(sp)
   10230:	dec00204 	addi	sp,sp,8
   10234:	f800283a 	ret

Disassembly of section .text:

00010238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   1023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10244:	00bffd16 	blt	zero,r2,1023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10248:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   1024c:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10254:	d6a93c14 	ori	gp,gp,42224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   1025c:	108a0b14 	ori	r2,r2,10284

    movhi r3, %hi(__bss_end)
   10260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10264:	18ca5414 	ori	r3,r3,10576

    beq r2, r3, 1f
   10268:	10c00326 	beq	r2,r3,10278 <_start+0x40>

0:
    stw zero, (r2)
   1026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10274:	10fffd36 	bltu	r2,r3,1026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10278:	00104600 	call	10460 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   1027c:	00104e40 	call	104e4 <alt_main>

00010280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10280:	003fff06 	br	10280 <alt_after_alt_main>

00010284 <main>:
#include "altera_up_avalon_character_lcd.h"

static alt_u8 count;

int main(void)
{
   10284:	defff204 	addi	sp,sp,-56
   10288:	dfc00d15 	stw	ra,52(sp)
   1028c:	df000c15 	stw	fp,48(sp)
   10290:	df000c04 	addi	fp,sp,48
    char member[] = "Arthur          ";
   10294:	e0fff8c4 	addi	r3,fp,-29
   10298:	00800074 	movhi	r2,1
   1029c:	10886d04 	addi	r2,r2,8628
   102a0:	01000444 	movi	r4,17
   102a4:	200d883a 	mov	r6,r4
   102a8:	100b883a 	mov	r5,r2
   102ac:	1809883a 	mov	r4,r3
   102b0:	00103d00 	call	103d0 <memcpy>
    char member2[] = "Jefferson       ";
   102b4:	00995284 	movi	r2,25930
   102b8:	e0bff48d 	sth	r2,-46(fp)
   102bc:	00999984 	movi	r2,26214
   102c0:	e0bff50d 	sth	r2,-44(fp)
   102c4:	009c9944 	movi	r2,29285
   102c8:	e0bff58d 	sth	r2,-42(fp)
   102cc:	009bdcc4 	movi	r2,28531
   102d0:	e0bff60d 	sth	r2,-40(fp)
   102d4:	00881b84 	movi	r2,8302
   102d8:	e0bff68d 	sth	r2,-38(fp)
   102dc:	00880804 	movi	r2,8224
   102e0:	e0bff70d 	sth	r2,-36(fp)
   102e4:	00880804 	movi	r2,8224
   102e8:	e0bff78d 	sth	r2,-34(fp)
   102ec:	00880804 	movi	r2,8224
   102f0:	e0bff80d 	sth	r2,-32(fp)
   102f4:	e03ff885 	stb	zero,-30(fp)

    char *m1, *m2;

    m1 = &member;
   102f8:	e0bff8c4 	addi	r2,fp,-29
   102fc:	e0bfff15 	stw	r2,-4(fp)
    m2 = &member2;
   10300:	e0bff484 	addi	r2,fp,-46
   10304:	e0bffe15 	stw	r2,-8(fp)

    alt_up_character_lcd_dev * char_lcd_dev;
    char_lcd_dev = alt_up_character_lcd_open_dev (CHARACTER_LCD_0_NAME);
   10308:	01000074 	movhi	r4,1
   1030c:	21086704 	addi	r4,r4,8604
   10310:	0010a800 	call	10a80 <alt_up_character_lcd_open_dev>
   10314:	e0bffd15 	stw	r2,-12(fp)
    count = 0;
   10318:	d020cf05 	stb	zero,-31940(gp)

    while( 1 ){

        //Liga leds vermelho
        IOWR_ALTERA_AVALON_PIO_DATA(LED_R_BASE, IORD_ALTERA_AVALON_PIO_DATA(SW_OPERATOR_BASE));
   1031c:	008000b4 	movhi	r2,2
   10320:	10c41037 	ldwio	r3,4160(r2)
   10324:	008000b4 	movhi	r2,2
   10328:	10c40c35 	stwio	r3,4144(r2)
        if( IORD_ALTERA_AVALON_PIO_DATA(ENTER_BASE) == 1)
   1032c:	008000b4 	movhi	r2,2
   10330:	10840837 	ldwio	r2,4128(r2)
   10334:	10800058 	cmpnei	r2,r2,1
   10338:	1000111e 	bne	r2,zero,10380 <main+0xfc>
        {
        	alt_up_character_lcd_init (char_lcd_dev);
   1033c:	e13ffd17 	ldw	r4,-12(fp)
   10340:	0010a480 	call	10a48 <alt_up_character_lcd_init>
        	alt_up_character_lcd_string(char_lcd_dev, m1);
   10344:	e17fff17 	ldw	r5,-4(fp)
   10348:	e13ffd17 	ldw	r4,-12(fp)
   1034c:	0010b3c0 	call	10b3c <alt_up_character_lcd_string>
        	(*(alt_u8 *)(0x00011020)) = count;
   10350:	00800074 	movhi	r2,1
   10354:	10840804 	addi	r2,r2,4128
   10358:	d0e0cf03 	ldbu	r3,-31940(gp)
   1035c:	10c00005 	stb	r3,0(r2)
        	IOWR_ALTERA_AVALON_PIO_DATA(LED_G_BASE,count);
   10360:	d0a0cf03 	ldbu	r2,-31940(gp)
   10364:	10c03fcc 	andi	r3,r2,255
   10368:	008000b4 	movhi	r2,2
   1036c:	10c41435 	stwio	r3,4176(r2)
			count++;
   10370:	d0a0cf03 	ldbu	r2,-31940(gp)
   10374:	10800044 	addi	r2,r2,1
   10378:	d0a0cf05 	stb	r2,-31940(gp)
   1037c:	00001006 	br	103c0 <main+0x13c>
        }
        else
        {
        	alt_up_character_lcd_init (char_lcd_dev);
   10380:	e13ffd17 	ldw	r4,-12(fp)
   10384:	0010a480 	call	10a48 <alt_up_character_lcd_init>
			alt_up_character_lcd_string(char_lcd_dev, m2);
   10388:	e17ffe17 	ldw	r5,-8(fp)
   1038c:	e13ffd17 	ldw	r4,-12(fp)
   10390:	0010b3c0 	call	10b3c <alt_up_character_lcd_string>
			(*(alt_u8 *)(0x00011020)) = count;
   10394:	00800074 	movhi	r2,1
   10398:	10840804 	addi	r2,r2,4128
   1039c:	d0e0cf03 	ldbu	r3,-31940(gp)
   103a0:	10c00005 	stb	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(LED_G_BASE,count);
   103a4:	d0a0cf03 	ldbu	r2,-31940(gp)
   103a8:	10c03fcc 	andi	r3,r2,255
   103ac:	008000b4 	movhi	r2,2
   103b0:	10c41435 	stwio	r3,4176(r2)
			count--;
   103b4:	d0a0cf03 	ldbu	r2,-31940(gp)
   103b8:	10bfffc4 	addi	r2,r2,-1
   103bc:	d0a0cf05 	stb	r2,-31940(gp)
        }

        usleep(100000); /* Sleep for 0.1s. */
   103c0:	010000b4 	movhi	r4,2
   103c4:	2121a804 	addi	r4,r4,-31072
   103c8:	00105500 	call	10550 <usleep>
        IOWR_ALTERA_AVALON_PIO_DATA(LED_R_BASE, IORD_ALTERA_AVALON_PIO_DATA(SW_OPERATOR_BASE));
   103cc:	003fd306 	br	1031c <main+0x98>

000103d0 <memcpy>:
   103d0:	2005883a 	mov	r2,r4
   103d4:	0007883a 	mov	r3,zero
   103d8:	30c0011e 	bne	r6,r3,103e0 <memcpy+0x10>
   103dc:	f800283a 	ret
   103e0:	28cf883a 	add	r7,r5,r3
   103e4:	39c00003 	ldbu	r7,0(r7)
   103e8:	10c9883a 	add	r4,r2,r3
   103ec:	18c00044 	addi	r3,r3,1
   103f0:	21c00005 	stb	r7,0(r4)
   103f4:	003ff806 	br	103d8 <memcpy+0x8>

000103f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   103f8:	defffc04 	addi	sp,sp,-16
   103fc:	df000315 	stw	fp,12(sp)
   10400:	df000304 	addi	fp,sp,12
   10404:	e13fff15 	stw	r4,-4(fp)
   10408:	e17ffe15 	stw	r5,-8(fp)
   1040c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   10410:	e0fffe17 	ldw	r3,-8(fp)
   10414:	e0bfff17 	ldw	r2,-4(fp)
   10418:	18800c26 	beq	r3,r2,1044c <alt_load_section+0x54>
  {
    while( to != end )
   1041c:	00000806 	br	10440 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10420:	e0ffff17 	ldw	r3,-4(fp)
   10424:	18800104 	addi	r2,r3,4
   10428:	e0bfff15 	stw	r2,-4(fp)
   1042c:	e0bffe17 	ldw	r2,-8(fp)
   10430:	11000104 	addi	r4,r2,4
   10434:	e13ffe15 	stw	r4,-8(fp)
   10438:	18c00017 	ldw	r3,0(r3)
   1043c:	10c00015 	stw	r3,0(r2)
    while( to != end )
   10440:	e0fffe17 	ldw	r3,-8(fp)
   10444:	e0bffd17 	ldw	r2,-12(fp)
   10448:	18bff51e 	bne	r3,r2,10420 <alt_load_section+0x28>
    }
  }
}
   1044c:	0001883a 	nop
   10450:	e037883a 	mov	sp,fp
   10454:	df000017 	ldw	fp,0(sp)
   10458:	dec00104 	addi	sp,sp,4
   1045c:	f800283a 	ret

00010460 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10460:	defffe04 	addi	sp,sp,-8
   10464:	dfc00115 	stw	ra,4(sp)
   10468:	df000015 	stw	fp,0(sp)
   1046c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10470:	01800074 	movhi	r6,1
   10474:	31894704 	addi	r6,r6,9500
   10478:	01400074 	movhi	r5,1
   1047c:	29488304 	addi	r5,r5,8716
   10480:	01000074 	movhi	r4,1
   10484:	21094704 	addi	r4,r4,9500
   10488:	00103f80 	call	103f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1048c:	01800074 	movhi	r6,1
   10490:	31808e04 	addi	r6,r6,568
   10494:	01400074 	movhi	r5,1
   10498:	29400804 	addi	r5,r5,32
   1049c:	01000074 	movhi	r4,1
   104a0:	21000804 	addi	r4,r4,32
   104a4:	00103f80 	call	103f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   104a8:	01800074 	movhi	r6,1
   104ac:	31888304 	addi	r6,r6,8716
   104b0:	01400074 	movhi	r5,1
   104b4:	29486704 	addi	r5,r5,8604
   104b8:	01000074 	movhi	r4,1
   104bc:	21086704 	addi	r4,r4,8604
   104c0:	00103f80 	call	103f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   104c4:	00110f40 	call	110f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   104c8:	00112e00 	call	112e0 <alt_icache_flush_all>
}
   104cc:	0001883a 	nop
   104d0:	e037883a 	mov	sp,fp
   104d4:	dfc00117 	ldw	ra,4(sp)
   104d8:	df000017 	ldw	fp,0(sp)
   104dc:	dec00204 	addi	sp,sp,8
   104e0:	f800283a 	ret

000104e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104e4:	defffd04 	addi	sp,sp,-12
   104e8:	dfc00215 	stw	ra,8(sp)
   104ec:	df000115 	stw	fp,4(sp)
   104f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104f4:	0009883a 	mov	r4,zero
   104f8:	00105b40 	call	105b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   104fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10500:	00105f00 	call	105f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10504:	01800074 	movhi	r6,1
   10508:	31887204 	addi	r6,r6,8648
   1050c:	01400074 	movhi	r5,1
   10510:	29487204 	addi	r5,r5,8648
   10514:	01000074 	movhi	r4,1
   10518:	21087204 	addi	r4,r4,8648
   1051c:	001165c0 	call	1165c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10520:	d0a0d017 	ldw	r2,-31936(gp)
   10524:	d0e0d117 	ldw	r3,-31932(gp)
   10528:	d120d217 	ldw	r4,-31928(gp)
   1052c:	200d883a 	mov	r6,r4
   10530:	180b883a 	mov	r5,r3
   10534:	1009883a 	mov	r4,r2
   10538:	00102840 	call	10284 <main>
   1053c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10540:	01000044 	movi	r4,1
   10544:	00110240 	call	11024 <close>
  exit (result);
   10548:	e13fff17 	ldw	r4,-4(fp)
   1054c:	0011e180 	call	11e18 <exit>

00010550 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10550:	defffd04 	addi	sp,sp,-12
   10554:	dfc00215 	stw	ra,8(sp)
   10558:	df000115 	stw	fp,4(sp)
   1055c:	df000104 	addi	fp,sp,4
   10560:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10564:	e13fff17 	ldw	r4,-4(fp)
   10568:	0010e900 	call	10e90 <alt_busy_sleep>
}
   1056c:	e037883a 	mov	sp,fp
   10570:	dfc00117 	ldw	ra,4(sp)
   10574:	df000017 	ldw	fp,0(sp)
   10578:	dec00204 	addi	sp,sp,8
   1057c:	f800283a 	ret

00010580 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10580:	defffd04 	addi	sp,sp,-12
   10584:	dfc00215 	stw	ra,8(sp)
   10588:	df000115 	stw	fp,4(sp)
   1058c:	df000104 	addi	fp,sp,4
   10590:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10594:	d1600204 	addi	r5,gp,-32760
   10598:	e13fff17 	ldw	r4,-4(fp)
   1059c:	00111a80 	call	111a8 <alt_dev_llist_insert>
}
   105a0:	e037883a 	mov	sp,fp
   105a4:	dfc00117 	ldw	ra,4(sp)
   105a8:	df000017 	ldw	fp,0(sp)
   105ac:	dec00204 	addi	sp,sp,8
   105b0:	f800283a 	ret

000105b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   105b4:	defffd04 	addi	sp,sp,-12
   105b8:	dfc00215 	stw	ra,8(sp)
   105bc:	df000115 	stw	fp,4(sp)
   105c0:	df000104 	addi	fp,sp,4
   105c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   105c8:	0011b240 	call	11b24 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   105cc:	00800044 	movi	r2,1
   105d0:	1001703a 	wrctl	status,r2
}
   105d4:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   105d8:	0001883a 	nop
   105dc:	e037883a 	mov	sp,fp
   105e0:	dfc00117 	ldw	ra,4(sp)
   105e4:	df000017 	ldw	fp,0(sp)
   105e8:	dec00204 	addi	sp,sp,8
   105ec:	f800283a 	ret

000105f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   105f0:	defffe04 	addi	sp,sp,-8
   105f4:	dfc00115 	stw	ra,4(sp)
   105f8:	df000015 	stw	fp,0(sp)
   105fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   10600:	01c0fa04 	movi	r7,1000
   10604:	01800044 	movi	r6,1
   10608:	000b883a 	mov	r5,zero
   1060c:	010000b4 	movhi	r4,2
   10610:	21040004 	addi	r4,r4,4096
   10614:	00109100 	call	10910 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   10618:	01000074 	movhi	r4,1
   1061c:	21088304 	addi	r4,r4,8716
   10620:	00105800 	call	10580 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
   10624:	01000074 	movhi	r4,1
   10628:	21088e04 	addi	r4,r4,8760
   1062c:	0010a480 	call	10a48 <alt_up_character_lcd_init>
   10630:	01000074 	movhi	r4,1
   10634:	21088e04 	addi	r4,r4,8760
   10638:	00105800 	call	10580 <alt_dev_reg>
}
   1063c:	0001883a 	nop
   10640:	e037883a 	mov	sp,fp
   10644:	dfc00117 	ldw	ra,4(sp)
   10648:	df000017 	ldw	fp,0(sp)
   1064c:	dec00204 	addi	sp,sp,8
   10650:	f800283a 	ret

00010654 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10654:	defffa04 	addi	sp,sp,-24
   10658:	dfc00515 	stw	ra,20(sp)
   1065c:	df000415 	stw	fp,16(sp)
   10660:	df000404 	addi	fp,sp,16
   10664:	e13ffe15 	stw	r4,-8(fp)
   10668:	e17ffd15 	stw	r5,-12(fp)
   1066c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10670:	e0bffe17 	ldw	r2,-8(fp)
   10674:	10800017 	ldw	r2,0(r2)
   10678:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1067c:	e0bfff17 	ldw	r2,-4(fp)
   10680:	10c00a04 	addi	r3,r2,40
   10684:	e0bffe17 	ldw	r2,-8(fp)
   10688:	10800217 	ldw	r2,8(r2)
   1068c:	100f883a 	mov	r7,r2
   10690:	e1bffc17 	ldw	r6,-16(fp)
   10694:	e17ffd17 	ldw	r5,-12(fp)
   10698:	1809883a 	mov	r4,r3
   1069c:	00107140 	call	10714 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   106a0:	e037883a 	mov	sp,fp
   106a4:	dfc00117 	ldw	ra,4(sp)
   106a8:	df000017 	ldw	fp,0(sp)
   106ac:	dec00204 	addi	sp,sp,8
   106b0:	f800283a 	ret

000106b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   106b4:	defffa04 	addi	sp,sp,-24
   106b8:	dfc00515 	stw	ra,20(sp)
   106bc:	df000415 	stw	fp,16(sp)
   106c0:	df000404 	addi	fp,sp,16
   106c4:	e13ffe15 	stw	r4,-8(fp)
   106c8:	e17ffd15 	stw	r5,-12(fp)
   106cc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   106d0:	e0bffe17 	ldw	r2,-8(fp)
   106d4:	10800017 	ldw	r2,0(r2)
   106d8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   106dc:	e0bfff17 	ldw	r2,-4(fp)
   106e0:	10c00a04 	addi	r3,r2,40
   106e4:	e0bffe17 	ldw	r2,-8(fp)
   106e8:	10800217 	ldw	r2,8(r2)
   106ec:	100f883a 	mov	r7,r2
   106f0:	e1bffc17 	ldw	r6,-16(fp)
   106f4:	e17ffd17 	ldw	r5,-12(fp)
   106f8:	1809883a 	mov	r4,r3
   106fc:	00108000 	call	10800 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10700:	e037883a 	mov	sp,fp
   10704:	dfc00117 	ldw	ra,4(sp)
   10708:	df000017 	ldw	fp,0(sp)
   1070c:	dec00204 	addi	sp,sp,8
   10710:	f800283a 	ret

00010714 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   10714:	defff704 	addi	sp,sp,-36
   10718:	df000815 	stw	fp,32(sp)
   1071c:	df000804 	addi	fp,sp,32
   10720:	e13ffb15 	stw	r4,-20(fp)
   10724:	e17ffa15 	stw	r5,-24(fp)
   10728:	e1bff915 	stw	r6,-28(fp)
   1072c:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   10730:	e0bffb17 	ldw	r2,-20(fp)
   10734:	10800017 	ldw	r2,0(r2)
   10738:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   1073c:	e0bffa17 	ldw	r2,-24(fp)
   10740:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   10744:	e0bff917 	ldw	r2,-28(fp)
   10748:	e0fffa17 	ldw	r3,-24(fp)
   1074c:	1885883a 	add	r2,r3,r2
   10750:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   10754:	00001206 	br	107a0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10758:	e0bffe17 	ldw	r2,-8(fp)
   1075c:	10800037 	ldwio	r2,0(r2)
   10760:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   10764:	e0bffc17 	ldw	r2,-16(fp)
   10768:	10a0000c 	andi	r2,r2,32768
   1076c:	10000626 	beq	r2,zero,10788 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10770:	e0bfff17 	ldw	r2,-4(fp)
   10774:	10c00044 	addi	r3,r2,1
   10778:	e0ffff15 	stw	r3,-4(fp)
   1077c:	e0fffc17 	ldw	r3,-16(fp)
   10780:	10c00005 	stb	r3,0(r2)
   10784:	00000606 	br	107a0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   10788:	e0ffff17 	ldw	r3,-4(fp)
   1078c:	e0bffa17 	ldw	r2,-24(fp)
   10790:	1880071e 	bne	r3,r2,107b0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   10794:	e0bff817 	ldw	r2,-32(fp)
   10798:	1090000c 	andi	r2,r2,16384
   1079c:	1000061e 	bne	r2,zero,107b8 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   107a0:	e0ffff17 	ldw	r3,-4(fp)
   107a4:	e0bffd17 	ldw	r2,-12(fp)
   107a8:	18bfeb36 	bltu	r3,r2,10758 <altera_avalon_jtag_uart_read+0x44>
   107ac:	00000306 	br	107bc <altera_avalon_jtag_uart_read+0xa8>
      break;
   107b0:	0001883a 	nop
   107b4:	00000106 	br	107bc <altera_avalon_jtag_uart_read+0xa8>
      break;   
   107b8:	0001883a 	nop
    
  }

  if (ptr != buffer)
   107bc:	e0ffff17 	ldw	r3,-4(fp)
   107c0:	e0bffa17 	ldw	r2,-24(fp)
   107c4:	18800426 	beq	r3,r2,107d8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   107c8:	e0ffff17 	ldw	r3,-4(fp)
   107cc:	e0bffa17 	ldw	r2,-24(fp)
   107d0:	1885c83a 	sub	r2,r3,r2
   107d4:	00000606 	br	107f0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   107d8:	e0bff817 	ldw	r2,-32(fp)
   107dc:	1090000c 	andi	r2,r2,16384
   107e0:	10000226 	beq	r2,zero,107ec <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   107e4:	00bffd44 	movi	r2,-11
   107e8:	00000106 	br	107f0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   107ec:	00bffec4 	movi	r2,-5
}
   107f0:	e037883a 	mov	sp,fp
   107f4:	df000017 	ldw	fp,0(sp)
   107f8:	dec00104 	addi	sp,sp,4
   107fc:	f800283a 	ret

00010800 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10800:	defff904 	addi	sp,sp,-28
   10804:	df000615 	stw	fp,24(sp)
   10808:	df000604 	addi	fp,sp,24
   1080c:	e13ffd15 	stw	r4,-12(fp)
   10810:	e17ffc15 	stw	r5,-16(fp)
   10814:	e1bffb15 	stw	r6,-20(fp)
   10818:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   1081c:	e0bffd17 	ldw	r2,-12(fp)
   10820:	10800017 	ldw	r2,0(r2)
   10824:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   10828:	e0bffb17 	ldw	r2,-20(fp)
   1082c:	e0fffc17 	ldw	r3,-16(fp)
   10830:	1885883a 	add	r2,r3,r2
   10834:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   10838:	00000e06 	br	10874 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1083c:	e0bfff17 	ldw	r2,-4(fp)
   10840:	10800104 	addi	r2,r2,4
   10844:	10800037 	ldwio	r2,0(r2)
   10848:	10bfffec 	andhi	r2,r2,65535
   1084c:	10000926 	beq	r2,zero,10874 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10850:	e0ffff17 	ldw	r3,-4(fp)
   10854:	e0bffc17 	ldw	r2,-16(fp)
   10858:	11000044 	addi	r4,r2,1
   1085c:	e13ffc15 	stw	r4,-16(fp)
   10860:	10800003 	ldbu	r2,0(r2)
   10864:	10803fcc 	andi	r2,r2,255
   10868:	1080201c 	xori	r2,r2,128
   1086c:	10bfe004 	addi	r2,r2,-128
   10870:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   10874:	e0fffc17 	ldw	r3,-16(fp)
   10878:	e0bffe17 	ldw	r2,-8(fp)
   1087c:	18bfef36 	bltu	r3,r2,1083c <altera_avalon_jtag_uart_write+0x3c>

  return count;
   10880:	e0bffb17 	ldw	r2,-20(fp)
}
   10884:	e037883a 	mov	sp,fp
   10888:	df000017 	ldw	fp,0(sp)
   1088c:	dec00104 	addi	sp,sp,4
   10890:	f800283a 	ret

00010894 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10894:	defffa04 	addi	sp,sp,-24
   10898:	dfc00515 	stw	ra,20(sp)
   1089c:	df000415 	stw	fp,16(sp)
   108a0:	df000404 	addi	fp,sp,16
   108a4:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   108a8:	0007883a 	mov	r3,zero
   108ac:	e0bffc17 	ldw	r2,-16(fp)
   108b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   108b4:	e0bffc17 	ldw	r2,-16(fp)
   108b8:	10800104 	addi	r2,r2,4
   108bc:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   108c0:	0005303a 	rdctl	r2,status
   108c4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108c8:	e0fffd17 	ldw	r3,-12(fp)
   108cc:	00bfff84 	movi	r2,-2
   108d0:	1884703a 	and	r2,r3,r2
   108d4:	1001703a 	wrctl	status,r2
  return context;
   108d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   108dc:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   108e0:	0011a1c0 	call	11a1c <alt_tick>
   108e4:	e0bfff17 	ldw	r2,-4(fp)
   108e8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   108ec:	e0bffe17 	ldw	r2,-8(fp)
   108f0:	1001703a 	wrctl	status,r2
}
   108f4:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   108f8:	0001883a 	nop
   108fc:	e037883a 	mov	sp,fp
   10900:	dfc00117 	ldw	ra,4(sp)
   10904:	df000017 	ldw	fp,0(sp)
   10908:	dec00204 	addi	sp,sp,8
   1090c:	f800283a 	ret

00010910 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10910:	defff804 	addi	sp,sp,-32
   10914:	dfc00715 	stw	ra,28(sp)
   10918:	df000615 	stw	fp,24(sp)
   1091c:	df000604 	addi	fp,sp,24
   10920:	e13ffe15 	stw	r4,-8(fp)
   10924:	e17ffd15 	stw	r5,-12(fp)
   10928:	e1bffc15 	stw	r6,-16(fp)
   1092c:	e1fffb15 	stw	r7,-20(fp)
   10930:	e0bffb17 	ldw	r2,-20(fp)
   10934:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10938:	d0a0d417 	ldw	r2,-31920(gp)
   1093c:	1000031e 	bne	r2,zero,1094c <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   10940:	e0bfff17 	ldw	r2,-4(fp)
   10944:	d0a0d415 	stw	r2,-31920(gp)
    return 0;
   10948:	00000106 	br	10950 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   1094c:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10950:	e0bffe17 	ldw	r2,-8(fp)
   10954:	10800104 	addi	r2,r2,4
   10958:	00c001c4 	movi	r3,7
   1095c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10960:	d8000015 	stw	zero,0(sp)
   10964:	e1fffe17 	ldw	r7,-8(fp)
   10968:	01800074 	movhi	r6,1
   1096c:	31822504 	addi	r6,r6,2196
   10970:	e17ffc17 	ldw	r5,-16(fp)
   10974:	e13ffd17 	ldw	r4,-12(fp)
   10978:	00113140 	call	11314 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1097c:	0001883a 	nop
   10980:	e037883a 	mov	sp,fp
   10984:	dfc00117 	ldw	ra,4(sp)
   10988:	df000017 	ldw	fp,0(sp)
   1098c:	dec00204 	addi	sp,sp,8
   10990:	f800283a 	ret

00010994 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   10994:	defffc04 	addi	sp,sp,-16
   10998:	df000315 	stw	fp,12(sp)
   1099c:	df000304 	addi	fp,sp,12
   109a0:	e13ffe15 	stw	r4,-8(fp)
   109a4:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   109a8:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
   109ac:	e0bffd17 	ldw	r2,-12(fp)
   109b0:	1000061e 	bne	r2,zero,109cc <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   109b4:	e0bffe17 	ldw	r2,-8(fp)
   109b8:	1007883a 	mov	r3,r2
   109bc:	e0bfffc3 	ldbu	r2,-1(fp)
   109c0:	10c4b03a 	or	r2,r2,r3
   109c4:	e0bfffc5 	stb	r2,-1(fp)
   109c8:	00000806 	br	109ec <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   109cc:	e0bffe17 	ldw	r2,-8(fp)
   109d0:	1007883a 	mov	r3,r2
   109d4:	e0bfffc3 	ldbu	r2,-1(fp)
   109d8:	10c4b03a 	or	r2,r2,r3
   109dc:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
   109e0:	e0bfffc3 	ldbu	r2,-1(fp)
   109e4:	10801014 	ori	r2,r2,64
   109e8:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   109ec:	e0ffffc3 	ldbu	r3,-1(fp)
   109f0:	00bfe004 	movi	r2,-128
   109f4:	1884b03a 	or	r2,r3,r2
}
   109f8:	e037883a 	mov	sp,fp
   109fc:	df000017 	ldw	fp,0(sp)
   10a00:	dec00104 	addi	sp,sp,4
   10a04:	f800283a 	ret

00010a08 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   10a08:	defffd04 	addi	sp,sp,-12
   10a0c:	df000215 	stw	fp,8(sp)
   10a10:	df000204 	addi	fp,sp,8
   10a14:	e13fff15 	stw	r4,-4(fp)
   10a18:	2805883a 	mov	r2,r5
   10a1c:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   10a20:	e0bfff17 	ldw	r2,-4(fp)
   10a24:	10800a17 	ldw	r2,40(r2)
   10a28:	1007883a 	mov	r3,r2
   10a2c:	e0bffe03 	ldbu	r2,-8(fp)
   10a30:	18800025 	stbio	r2,0(r3)
}
   10a34:	0001883a 	nop
   10a38:	e037883a 	mov	sp,fp
   10a3c:	df000017 	ldw	fp,0(sp)
   10a40:	dec00104 	addi	sp,sp,4
   10a44:	f800283a 	ret

00010a48 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   10a48:	defffe04 	addi	sp,sp,-8
   10a4c:	df000115 	stw	fp,4(sp)
   10a50:	df000104 	addi	fp,sp,4
   10a54:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   10a58:	e0bfff17 	ldw	r2,-4(fp)
   10a5c:	10800a17 	ldw	r2,40(r2)
   10a60:	1007883a 	mov	r3,r2
   10a64:	00800044 	movi	r2,1
   10a68:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   10a6c:	0001883a 	nop
   10a70:	e037883a 	mov	sp,fp
   10a74:	df000017 	ldw	fp,0(sp)
   10a78:	dec00104 	addi	sp,sp,4
   10a7c:	f800283a 	ret

00010a80 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   10a80:	defffc04 	addi	sp,sp,-16
   10a84:	dfc00315 	stw	ra,12(sp)
   10a88:	df000215 	stw	fp,8(sp)
   10a8c:	df000204 	addi	fp,sp,8
   10a90:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   10a94:	d1600204 	addi	r5,gp,-32760
   10a98:	e13ffe17 	ldw	r4,-8(fp)
   10a9c:	00112500 	call	11250 <alt_find_dev>
   10aa0:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   10aa4:	e0bfff17 	ldw	r2,-4(fp)
}
   10aa8:	e037883a 	mov	sp,fp
   10aac:	dfc00117 	ldw	ra,4(sp)
   10ab0:	df000017 	ldw	fp,0(sp)
   10ab4:	dec00204 	addi	sp,sp,8
   10ab8:	f800283a 	ret

00010abc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   10abc:	defffb04 	addi	sp,sp,-20
   10ac0:	df000415 	stw	fp,16(sp)
   10ac4:	df000404 	addi	fp,sp,16
   10ac8:	e13ffe15 	stw	r4,-8(fp)
   10acc:	e17ffd15 	stw	r5,-12(fp)
   10ad0:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   10ad4:	e03fff15 	stw	zero,-4(fp)
   10ad8:	00000f06 	br	10b18 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   10adc:	e0bffe17 	ldw	r2,-8(fp)
   10ae0:	10800a17 	ldw	r2,40(r2)
   10ae4:	10800044 	addi	r2,r2,1
   10ae8:	1009883a 	mov	r4,r2
   10aec:	e0fffd17 	ldw	r3,-12(fp)
   10af0:	e0bfff17 	ldw	r2,-4(fp)
   10af4:	1885883a 	add	r2,r3,r2
   10af8:	10800003 	ldbu	r2,0(r2)
   10afc:	10803fcc 	andi	r2,r2,255
   10b00:	1080201c 	xori	r2,r2,128
   10b04:	10bfe004 	addi	r2,r2,-128
   10b08:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
   10b0c:	e0bfff17 	ldw	r2,-4(fp)
   10b10:	10800044 	addi	r2,r2,1
   10b14:	e0bfff15 	stw	r2,-4(fp)
   10b18:	e0ffff17 	ldw	r3,-4(fp)
   10b1c:	e0bffc17 	ldw	r2,-16(fp)
   10b20:	18bfee36 	bltu	r3,r2,10adc <alt_up_character_lcd_write+0x20>
	}
}
   10b24:	0001883a 	nop
   10b28:	0001883a 	nop
   10b2c:	e037883a 	mov	sp,fp
   10b30:	df000017 	ldw	fp,0(sp)
   10b34:	dec00104 	addi	sp,sp,4
   10b38:	f800283a 	ret

00010b3c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   10b3c:	defffd04 	addi	sp,sp,-12
   10b40:	df000215 	stw	fp,8(sp)
   10b44:	df000204 	addi	fp,sp,8
   10b48:	e13fff15 	stw	r4,-4(fp)
   10b4c:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
   10b50:	00000d06 	br	10b88 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   10b54:	e0bfff17 	ldw	r2,-4(fp)
   10b58:	10800a17 	ldw	r2,40(r2)
   10b5c:	10800044 	addi	r2,r2,1
   10b60:	1007883a 	mov	r3,r2
   10b64:	e0bffe17 	ldw	r2,-8(fp)
   10b68:	10800003 	ldbu	r2,0(r2)
   10b6c:	10803fcc 	andi	r2,r2,255
   10b70:	1080201c 	xori	r2,r2,128
   10b74:	10bfe004 	addi	r2,r2,-128
   10b78:	18800025 	stbio	r2,0(r3)
		++ptr;
   10b7c:	e0bffe17 	ldw	r2,-8(fp)
   10b80:	10800044 	addi	r2,r2,1
   10b84:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
   10b88:	e0bffe17 	ldw	r2,-8(fp)
   10b8c:	10800003 	ldbu	r2,0(r2)
   10b90:	10803fcc 	andi	r2,r2,255
   10b94:	1080201c 	xori	r2,r2,128
   10b98:	10bfe004 	addi	r2,r2,-128
   10b9c:	103fed1e 	bne	r2,zero,10b54 <alt_up_character_lcd_string+0x18>
	}
}
   10ba0:	0001883a 	nop
   10ba4:	0001883a 	nop
   10ba8:	e037883a 	mov	sp,fp
   10bac:	df000017 	ldw	fp,0(sp)
   10bb0:	dec00104 	addi	sp,sp,4
   10bb4:	f800283a 	ret

00010bb8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   10bb8:	defffb04 	addi	sp,sp,-20
   10bbc:	dfc00415 	stw	ra,16(sp)
   10bc0:	df000315 	stw	fp,12(sp)
   10bc4:	df000304 	addi	fp,sp,12
   10bc8:	e13fff15 	stw	r4,-4(fp)
   10bcc:	e17ffe15 	stw	r5,-8(fp)
   10bd0:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   10bd4:	e0bfff17 	ldw	r2,-4(fp)
   10bd8:	10800017 	ldw	r2,0(r2)
   10bdc:	e0fffd17 	ldw	r3,-12(fp)
   10be0:	180d883a 	mov	r6,r3
   10be4:	e17ffe17 	ldw	r5,-8(fp)
   10be8:	1009883a 	mov	r4,r2
   10bec:	0010abc0 	call	10abc <alt_up_character_lcd_write>
	return 0;
   10bf0:	0005883a 	mov	r2,zero
}
   10bf4:	e037883a 	mov	sp,fp
   10bf8:	dfc00117 	ldw	ra,4(sp)
   10bfc:	df000017 	ldw	fp,0(sp)
   10c00:	dec00204 	addi	sp,sp,8
   10c04:	f800283a 	ret

00010c08 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   10c08:	defffa04 	addi	sp,sp,-24
   10c0c:	dfc00515 	stw	ra,20(sp)
   10c10:	df000415 	stw	fp,16(sp)
   10c14:	df000404 	addi	fp,sp,16
   10c18:	e13ffe15 	stw	r4,-8(fp)
   10c1c:	e17ffd15 	stw	r5,-12(fp)
   10c20:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   10c24:	e0bffd17 	ldw	r2,-12(fp)
   10c28:	10800a28 	cmpgeui	r2,r2,40
   10c2c:	1000031e 	bne	r2,zero,10c3c <alt_up_character_lcd_set_cursor_pos+0x34>
   10c30:	e0bffc17 	ldw	r2,-16(fp)
   10c34:	108000b0 	cmpltui	r2,r2,2
   10c38:	1000021e 	bne	r2,zero,10c44 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   10c3c:	00bfffc4 	movi	r2,-1
   10c40:	00000906 	br	10c68 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   10c44:	e17ffc17 	ldw	r5,-16(fp)
   10c48:	e13ffd17 	ldw	r4,-12(fp)
   10c4c:	00109940 	call	10994 <get_DDRAM_addr>
   10c50:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   10c54:	e0bfffc3 	ldbu	r2,-1(fp)
   10c58:	100b883a 	mov	r5,r2
   10c5c:	e13ffe17 	ldw	r4,-8(fp)
   10c60:	0010a080 	call	10a08 <alt_up_character_lcd_send_cmd>
	return 0;
   10c64:	0005883a 	mov	r2,zero
}
   10c68:	e037883a 	mov	sp,fp
   10c6c:	dfc00117 	ldw	ra,4(sp)
   10c70:	df000017 	ldw	fp,0(sp)
   10c74:	dec00204 	addi	sp,sp,8
   10c78:	f800283a 	ret

00010c7c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   10c7c:	defffb04 	addi	sp,sp,-20
   10c80:	dfc00415 	stw	ra,16(sp)
   10c84:	df000315 	stw	fp,12(sp)
   10c88:	df000304 	addi	fp,sp,12
   10c8c:	e13ffe15 	stw	r4,-8(fp)
   10c90:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   10c94:	e0bffd17 	ldw	r2,-12(fp)
   10c98:	10001526 	beq	r2,zero,10cf0 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   10c9c:	e0bffd17 	ldw	r2,-12(fp)
   10ca0:	0080020e 	bge	zero,r2,10cac <alt_up_character_lcd_shift_cursor+0x30>
   10ca4:	00800504 	movi	r2,20
   10ca8:	00000106 	br	10cb0 <alt_up_character_lcd_shift_cursor+0x34>
   10cac:	00800404 	movi	r2,16
   10cb0:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   10cb4:	e0bffd17 	ldw	r2,-12(fp)
   10cb8:	1000010e 	bge	r2,zero,10cc0 <alt_up_character_lcd_shift_cursor+0x44>
   10cbc:	0085c83a 	sub	r2,zero,r2
   10cc0:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   10cc4:	00000406 	br	10cd8 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   10cc8:	e0bfff83 	ldbu	r2,-2(fp)
   10ccc:	100b883a 	mov	r5,r2
   10cd0:	e13ffe17 	ldw	r4,-8(fp)
   10cd4:	0010a080 	call	10a08 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   10cd8:	e0bfffc3 	ldbu	r2,-1(fp)
   10cdc:	10ffffc4 	addi	r3,r2,-1
   10ce0:	e0ffffc5 	stb	r3,-1(fp)
   10ce4:	10803fcc 	andi	r2,r2,255
   10ce8:	103ff71e 	bne	r2,zero,10cc8 <alt_up_character_lcd_shift_cursor+0x4c>
   10cec:	00000106 	br	10cf4 <alt_up_character_lcd_shift_cursor+0x78>
		return;
   10cf0:	0001883a 	nop
}
   10cf4:	e037883a 	mov	sp,fp
   10cf8:	dfc00117 	ldw	ra,4(sp)
   10cfc:	df000017 	ldw	fp,0(sp)
   10d00:	dec00204 	addi	sp,sp,8
   10d04:	f800283a 	ret

00010d08 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   10d08:	defffb04 	addi	sp,sp,-20
   10d0c:	dfc00415 	stw	ra,16(sp)
   10d10:	df000315 	stw	fp,12(sp)
   10d14:	df000304 	addi	fp,sp,12
   10d18:	e13ffe15 	stw	r4,-8(fp)
   10d1c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   10d20:	e0bffd17 	ldw	r2,-12(fp)
   10d24:	10001526 	beq	r2,zero,10d7c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   10d28:	e0bffd17 	ldw	r2,-12(fp)
   10d2c:	0080020e 	bge	zero,r2,10d38 <alt_up_character_lcd_shift_display+0x30>
   10d30:	00800704 	movi	r2,28
   10d34:	00000106 	br	10d3c <alt_up_character_lcd_shift_display+0x34>
   10d38:	00800604 	movi	r2,24
   10d3c:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	1000010e 	bge	r2,zero,10d4c <alt_up_character_lcd_shift_display+0x44>
   10d48:	0085c83a 	sub	r2,zero,r2
   10d4c:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   10d50:	00000406 	br	10d64 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   10d54:	e0bfff83 	ldbu	r2,-2(fp)
   10d58:	100b883a 	mov	r5,r2
   10d5c:	e13ffe17 	ldw	r4,-8(fp)
   10d60:	0010a080 	call	10a08 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   10d64:	e0bfffc3 	ldbu	r2,-1(fp)
   10d68:	10ffffc4 	addi	r3,r2,-1
   10d6c:	e0ffffc5 	stb	r3,-1(fp)
   10d70:	10803fcc 	andi	r2,r2,255
   10d74:	103ff71e 	bne	r2,zero,10d54 <alt_up_character_lcd_shift_display+0x4c>
   10d78:	00000106 	br	10d80 <alt_up_character_lcd_shift_display+0x78>
		return;
   10d7c:	0001883a 	nop
}
   10d80:	e037883a 	mov	sp,fp
   10d84:	dfc00117 	ldw	ra,4(sp)
   10d88:	df000017 	ldw	fp,0(sp)
   10d8c:	dec00204 	addi	sp,sp,8
   10d90:	f800283a 	ret

00010d94 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   10d94:	defffa04 	addi	sp,sp,-24
   10d98:	dfc00515 	stw	ra,20(sp)
   10d9c:	df000415 	stw	fp,16(sp)
   10da0:	df000404 	addi	fp,sp,16
   10da4:	e13ffe15 	stw	r4,-8(fp)
   10da8:	e17ffd15 	stw	r5,-12(fp)
   10dac:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   10db0:	e0bffd17 	ldw	r2,-12(fp)
   10db4:	10800a28 	cmpgeui	r2,r2,40
   10db8:	1000031e 	bne	r2,zero,10dc8 <alt_up_character_lcd_erase_pos+0x34>
   10dbc:	e0bffc17 	ldw	r2,-16(fp)
   10dc0:	108000b0 	cmpltui	r2,r2,2
   10dc4:	1000021e 	bne	r2,zero,10dd0 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   10dc8:	00bfffc4 	movi	r2,-1
   10dcc:	00000f06 	br	10e0c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   10dd0:	e17ffc17 	ldw	r5,-16(fp)
   10dd4:	e13ffd17 	ldw	r4,-12(fp)
   10dd8:	00109940 	call	10994 <get_DDRAM_addr>
   10ddc:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   10de0:	e0bfffc3 	ldbu	r2,-1(fp)
   10de4:	100b883a 	mov	r5,r2
   10de8:	e13ffe17 	ldw	r4,-8(fp)
   10dec:	0010a080 	call	10a08 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	10800a17 	ldw	r2,40(r2)
   10df8:	10800044 	addi	r2,r2,1
   10dfc:	1007883a 	mov	r3,r2
   10e00:	00800084 	movi	r2,2
   10e04:	18800025 	stbio	r2,0(r3)
	return 0;
   10e08:	0005883a 	mov	r2,zero
}
   10e0c:	e037883a 	mov	sp,fp
   10e10:	dfc00117 	ldw	ra,4(sp)
   10e14:	df000017 	ldw	fp,0(sp)
   10e18:	dec00204 	addi	sp,sp,8
   10e1c:	f800283a 	ret

00010e20 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   10e20:	defffd04 	addi	sp,sp,-12
   10e24:	dfc00215 	stw	ra,8(sp)
   10e28:	df000115 	stw	fp,4(sp)
   10e2c:	df000104 	addi	fp,sp,4
   10e30:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   10e34:	01400304 	movi	r5,12
   10e38:	e13fff17 	ldw	r4,-4(fp)
   10e3c:	0010a080 	call	10a08 <alt_up_character_lcd_send_cmd>
}
   10e40:	0001883a 	nop
   10e44:	e037883a 	mov	sp,fp
   10e48:	dfc00117 	ldw	ra,4(sp)
   10e4c:	df000017 	ldw	fp,0(sp)
   10e50:	dec00204 	addi	sp,sp,8
   10e54:	f800283a 	ret

00010e58 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   10e58:	defffd04 	addi	sp,sp,-12
   10e5c:	dfc00215 	stw	ra,8(sp)
   10e60:	df000115 	stw	fp,4(sp)
   10e64:	df000104 	addi	fp,sp,4
   10e68:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   10e6c:	014003c4 	movi	r5,15
   10e70:	e13fff17 	ldw	r4,-4(fp)
   10e74:	0010a080 	call	10a08 <alt_up_character_lcd_send_cmd>
}
   10e78:	0001883a 	nop
   10e7c:	e037883a 	mov	sp,fp
   10e80:	dfc00117 	ldw	ra,4(sp)
   10e84:	df000017 	ldw	fp,0(sp)
   10e88:	dec00204 	addi	sp,sp,8
   10e8c:	f800283a 	ret

00010e90 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10e90:	defffa04 	addi	sp,sp,-24
   10e94:	dfc00515 	stw	ra,20(sp)
   10e98:	df000415 	stw	fp,16(sp)
   10e9c:	df000404 	addi	fp,sp,16
   10ea0:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10ea4:	008000c4 	movi	r2,3
   10ea8:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10eac:	e0fffe17 	ldw	r3,-8(fp)
   10eb0:	008003f4 	movhi	r2,15
   10eb4:	10909004 	addi	r2,r2,16960
   10eb8:	1885383a 	mul	r2,r3,r2
   10ebc:	100b883a 	mov	r5,r2
   10ec0:	0100bef4 	movhi	r4,763
   10ec4:	213c2004 	addi	r4,r4,-3968
   10ec8:	00120a40 	call	120a4 <__udivsi3>
  big_loops = us / (INT_MAX/
   10ecc:	100b883a 	mov	r5,r2
   10ed0:	01200034 	movhi	r4,32768
   10ed4:	213fffc4 	addi	r4,r4,-1
   10ed8:	00120a40 	call	120a4 <__udivsi3>
   10edc:	100b883a 	mov	r5,r2
   10ee0:	e13ffc17 	ldw	r4,-16(fp)
   10ee4:	00120a40 	call	120a4 <__udivsi3>
   10ee8:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   10eec:	e0bffd17 	ldw	r2,-12(fp)
   10ef0:	10002a26 	beq	r2,zero,10f9c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10ef4:	e03fff15 	stw	zero,-4(fp)
   10ef8:	00001706 	br	10f58 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10efc:	00a00034 	movhi	r2,32768
   10f00:	10bfffc4 	addi	r2,r2,-1
   10f04:	10bfffc4 	addi	r2,r2,-1
   10f08:	103ffe1e 	bne	r2,zero,10f04 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10f0c:	e0fffe17 	ldw	r3,-8(fp)
   10f10:	008003f4 	movhi	r2,15
   10f14:	10909004 	addi	r2,r2,16960
   10f18:	1885383a 	mul	r2,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10f1c:	100b883a 	mov	r5,r2
   10f20:	0100bef4 	movhi	r4,763
   10f24:	213c2004 	addi	r4,r4,-3968
   10f28:	00120a40 	call	120a4 <__udivsi3>
   10f2c:	100b883a 	mov	r5,r2
   10f30:	01200034 	movhi	r4,32768
   10f34:	213fffc4 	addi	r4,r4,-1
   10f38:	00120a40 	call	120a4 <__udivsi3>
   10f3c:	1007883a 	mov	r3,r2
   10f40:	e0bffc17 	ldw	r2,-16(fp)
   10f44:	10c5c83a 	sub	r2,r2,r3
   10f48:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   10f4c:	e0bfff17 	ldw	r2,-4(fp)
   10f50:	10800044 	addi	r2,r2,1
   10f54:	e0bfff15 	stw	r2,-4(fp)
   10f58:	e0ffff17 	ldw	r3,-4(fp)
   10f5c:	e0bffd17 	ldw	r2,-12(fp)
   10f60:	18bfe616 	blt	r3,r2,10efc <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10f64:	e0fffe17 	ldw	r3,-8(fp)
   10f68:	008003f4 	movhi	r2,15
   10f6c:	10909004 	addi	r2,r2,16960
   10f70:	1885383a 	mul	r2,r3,r2
   10f74:	100b883a 	mov	r5,r2
   10f78:	0100bef4 	movhi	r4,763
   10f7c:	213c2004 	addi	r4,r4,-3968
   10f80:	00120a40 	call	120a4 <__udivsi3>
   10f84:	1007883a 	mov	r3,r2
   10f88:	e0bffc17 	ldw	r2,-16(fp)
   10f8c:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   10f90:	10bfffc4 	addi	r2,r2,-1
   10f94:	103ffe1e 	bne	r2,zero,10f90 <alt_busy_sleep+0x100>
   10f98:	00000d06 	br	10fd0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10f9c:	e0fffe17 	ldw	r3,-8(fp)
   10fa0:	008003f4 	movhi	r2,15
   10fa4:	10909004 	addi	r2,r2,16960
   10fa8:	1885383a 	mul	r2,r3,r2
   10fac:	100b883a 	mov	r5,r2
   10fb0:	0100bef4 	movhi	r4,763
   10fb4:	213c2004 	addi	r4,r4,-3968
   10fb8:	00120a40 	call	120a4 <__udivsi3>
   10fbc:	1007883a 	mov	r3,r2
   10fc0:	e0bffc17 	ldw	r2,-16(fp)
   10fc4:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
   10fc8:	10bfffc4 	addi	r2,r2,-1
   10fcc:	00bffe16 	blt	zero,r2,10fc8 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10fd0:	0005883a 	mov	r2,zero
}
   10fd4:	e037883a 	mov	sp,fp
   10fd8:	dfc00117 	ldw	ra,4(sp)
   10fdc:	df000017 	ldw	fp,0(sp)
   10fe0:	dec00204 	addi	sp,sp,8
   10fe4:	f800283a 	ret

00010fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10fe8:	defffe04 	addi	sp,sp,-8
   10fec:	dfc00115 	stw	ra,4(sp)
   10ff0:	df000015 	stw	fp,0(sp)
   10ff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10ff8:	d0a00517 	ldw	r2,-32748(gp)
   10ffc:	10000326 	beq	r2,zero,1100c <alt_get_errno+0x24>
   11000:	d0a00517 	ldw	r2,-32748(gp)
   11004:	103ee83a 	callr	r2
   11008:	00000106 	br	11010 <alt_get_errno+0x28>
   1100c:	d0a0d704 	addi	r2,gp,-31908
}
   11010:	e037883a 	mov	sp,fp
   11014:	dfc00117 	ldw	ra,4(sp)
   11018:	df000017 	ldw	fp,0(sp)
   1101c:	dec00204 	addi	sp,sp,8
   11020:	f800283a 	ret

00011024 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11024:	defffb04 	addi	sp,sp,-20
   11028:	dfc00415 	stw	ra,16(sp)
   1102c:	df000315 	stw	fp,12(sp)
   11030:	df000304 	addi	fp,sp,12
   11034:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11038:	e0bffd17 	ldw	r2,-12(fp)
   1103c:	10000616 	blt	r2,zero,11058 <close+0x34>
   11040:	e0bffd17 	ldw	r2,-12(fp)
   11044:	10c00324 	muli	r3,r2,12
   11048:	00800074 	movhi	r2,1
   1104c:	1088a304 	addi	r2,r2,8844
   11050:	1885883a 	add	r2,r3,r2
   11054:	00000106 	br	1105c <close+0x38>
   11058:	0005883a 	mov	r2,zero
   1105c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   11060:	e0bfff17 	ldw	r2,-4(fp)
   11064:	10001926 	beq	r2,zero,110cc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11068:	e0bfff17 	ldw	r2,-4(fp)
   1106c:	10800017 	ldw	r2,0(r2)
   11070:	10800417 	ldw	r2,16(r2)
   11074:	10000626 	beq	r2,zero,11090 <close+0x6c>
   11078:	e0bfff17 	ldw	r2,-4(fp)
   1107c:	10800017 	ldw	r2,0(r2)
   11080:	10800417 	ldw	r2,16(r2)
   11084:	e13fff17 	ldw	r4,-4(fp)
   11088:	103ee83a 	callr	r2
   1108c:	00000106 	br	11094 <close+0x70>
   11090:	0005883a 	mov	r2,zero
   11094:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11098:	e13ffd17 	ldw	r4,-12(fp)
   1109c:	00119200 	call	11920 <alt_release_fd>
    if (rval < 0)
   110a0:	e0bffe17 	ldw	r2,-8(fp)
   110a4:	1000070e 	bge	r2,zero,110c4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   110a8:	0010fe80 	call	10fe8 <alt_get_errno>
   110ac:	1007883a 	mov	r3,r2
   110b0:	e0bffe17 	ldw	r2,-8(fp)
   110b4:	0085c83a 	sub	r2,zero,r2
   110b8:	18800015 	stw	r2,0(r3)
      return -1;
   110bc:	00bfffc4 	movi	r2,-1
   110c0:	00000706 	br	110e0 <close+0xbc>
    }
    return 0;
   110c4:	0005883a 	mov	r2,zero
   110c8:	00000506 	br	110e0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   110cc:	0010fe80 	call	10fe8 <alt_get_errno>
   110d0:	1007883a 	mov	r3,r2
   110d4:	00801444 	movi	r2,81
   110d8:	18800015 	stw	r2,0(r3)
    return -1;
   110dc:	00bfffc4 	movi	r2,-1
  }
}
   110e0:	e037883a 	mov	sp,fp
   110e4:	dfc00117 	ldw	ra,4(sp)
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00204 	addi	sp,sp,8
   110f0:	f800283a 	ret

000110f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   110f4:	defffe04 	addi	sp,sp,-8
   110f8:	df000115 	stw	fp,4(sp)
   110fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11100:	e03fff15 	stw	zero,-4(fp)
   11104:	00000506 	br	1111c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   11108:	e0bfff17 	ldw	r2,-4(fp)
   1110c:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11110:	e0bfff17 	ldw	r2,-4(fp)
   11114:	10800804 	addi	r2,r2,32
   11118:	e0bfff15 	stw	r2,-4(fp)
   1111c:	e0bfff17 	ldw	r2,-4(fp)
   11120:	10820030 	cmpltui	r2,r2,2048
   11124:	103ff81e 	bne	r2,zero,11108 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11128:	0001883a 	nop
   1112c:	0001883a 	nop
   11130:	e037883a 	mov	sp,fp
   11134:	df000017 	ldw	fp,0(sp)
   11138:	dec00104 	addi	sp,sp,4
   1113c:	f800283a 	ret

00011140 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11140:	defffc04 	addi	sp,sp,-16
   11144:	df000315 	stw	fp,12(sp)
   11148:	df000304 	addi	fp,sp,12
   1114c:	e13fff15 	stw	r4,-4(fp)
   11150:	e17ffe15 	stw	r5,-8(fp)
   11154:	e1bffd15 	stw	r6,-12(fp)
  return len;
   11158:	e0bffd17 	ldw	r2,-12(fp)
}
   1115c:	e037883a 	mov	sp,fp
   11160:	df000017 	ldw	fp,0(sp)
   11164:	dec00104 	addi	sp,sp,4
   11168:	f800283a 	ret

0001116c <alt_get_errno>:
{
   1116c:	defffe04 	addi	sp,sp,-8
   11170:	dfc00115 	stw	ra,4(sp)
   11174:	df000015 	stw	fp,0(sp)
   11178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1117c:	d0a00517 	ldw	r2,-32748(gp)
   11180:	10000326 	beq	r2,zero,11190 <alt_get_errno+0x24>
   11184:	d0a00517 	ldw	r2,-32748(gp)
   11188:	103ee83a 	callr	r2
   1118c:	00000106 	br	11194 <alt_get_errno+0x28>
   11190:	d0a0d704 	addi	r2,gp,-31908
}
   11194:	e037883a 	mov	sp,fp
   11198:	dfc00117 	ldw	ra,4(sp)
   1119c:	df000017 	ldw	fp,0(sp)
   111a0:	dec00204 	addi	sp,sp,8
   111a4:	f800283a 	ret

000111a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   111a8:	defffa04 	addi	sp,sp,-24
   111ac:	dfc00515 	stw	ra,20(sp)
   111b0:	df000415 	stw	fp,16(sp)
   111b4:	df000404 	addi	fp,sp,16
   111b8:	e13ffd15 	stw	r4,-12(fp)
   111bc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   111c0:	e0bffd17 	ldw	r2,-12(fp)
   111c4:	10000326 	beq	r2,zero,111d4 <alt_dev_llist_insert+0x2c>
   111c8:	e0bffd17 	ldw	r2,-12(fp)
   111cc:	10800217 	ldw	r2,8(r2)
   111d0:	1000061e 	bne	r2,zero,111ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   111d4:	001116c0 	call	1116c <alt_get_errno>
   111d8:	1007883a 	mov	r3,r2
   111dc:	00800584 	movi	r2,22
   111e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   111e4:	00bffa84 	movi	r2,-22
   111e8:	00001406 	br	1123c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   111ec:	e0bffd17 	ldw	r2,-12(fp)
   111f0:	e0fffc17 	ldw	r3,-16(fp)
   111f4:	e0ffff15 	stw	r3,-4(fp)
   111f8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   111fc:	e0bffe17 	ldw	r2,-8(fp)
   11200:	e0ffff17 	ldw	r3,-4(fp)
   11204:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11208:	e0bfff17 	ldw	r2,-4(fp)
   1120c:	10c00017 	ldw	r3,0(r2)
   11210:	e0bffe17 	ldw	r2,-8(fp)
   11214:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11218:	e0bfff17 	ldw	r2,-4(fp)
   1121c:	10800017 	ldw	r2,0(r2)
   11220:	e0fffe17 	ldw	r3,-8(fp)
   11224:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11228:	e0bfff17 	ldw	r2,-4(fp)
   1122c:	e0fffe17 	ldw	r3,-8(fp)
   11230:	10c00015 	stw	r3,0(r2)
}
   11234:	0001883a 	nop

  return 0;  
   11238:	0005883a 	mov	r2,zero
}
   1123c:	e037883a 	mov	sp,fp
   11240:	dfc00117 	ldw	ra,4(sp)
   11244:	df000017 	ldw	fp,0(sp)
   11248:	dec00204 	addi	sp,sp,8
   1124c:	f800283a 	ret

00011250 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11250:	defffa04 	addi	sp,sp,-24
   11254:	dfc00515 	stw	ra,20(sp)
   11258:	df000415 	stw	fp,16(sp)
   1125c:	df000404 	addi	fp,sp,16
   11260:	e13ffd15 	stw	r4,-12(fp)
   11264:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11268:	e0bffc17 	ldw	r2,-16(fp)
   1126c:	10800017 	ldw	r2,0(r2)
   11270:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11274:	e13ffd17 	ldw	r4,-12(fp)
   11278:	0011e680 	call	11e68 <strlen>
   1127c:	10800044 	addi	r2,r2,1
   11280:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11284:	00000d06 	br	112bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11288:	e0bfff17 	ldw	r2,-4(fp)
   1128c:	10800217 	ldw	r2,8(r2)
   11290:	e0fffe17 	ldw	r3,-8(fp)
   11294:	180d883a 	mov	r6,r3
   11298:	e17ffd17 	ldw	r5,-12(fp)
   1129c:	1009883a 	mov	r4,r2
   112a0:	0011e380 	call	11e38 <memcmp>
   112a4:	1000021e 	bne	r2,zero,112b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   112a8:	e0bfff17 	ldw	r2,-4(fp)
   112ac:	00000706 	br	112cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   112b0:	e0bfff17 	ldw	r2,-4(fp)
   112b4:	10800017 	ldw	r2,0(r2)
   112b8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   112bc:	e0ffff17 	ldw	r3,-4(fp)
   112c0:	e0bffc17 	ldw	r2,-16(fp)
   112c4:	18bff01e 	bne	r3,r2,11288 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   112c8:	0005883a 	mov	r2,zero
}
   112cc:	e037883a 	mov	sp,fp
   112d0:	dfc00117 	ldw	ra,4(sp)
   112d4:	df000017 	ldw	fp,0(sp)
   112d8:	dec00204 	addi	sp,sp,8
   112dc:	f800283a 	ret

000112e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   112e0:	defffe04 	addi	sp,sp,-8
   112e4:	dfc00115 	stw	ra,4(sp)
   112e8:	df000015 	stw	fp,0(sp)
   112ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   112f0:	01420004 	movi	r5,2048
   112f4:	0009883a 	mov	r4,zero
   112f8:	0011cf00 	call	11cf0 <alt_icache_flush>
#endif
}
   112fc:	0001883a 	nop
   11300:	e037883a 	mov	sp,fp
   11304:	dfc00117 	ldw	ra,4(sp)
   11308:	df000017 	ldw	fp,0(sp)
   1130c:	dec00204 	addi	sp,sp,8
   11310:	f800283a 	ret

00011314 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11314:	defff904 	addi	sp,sp,-28
   11318:	dfc00615 	stw	ra,24(sp)
   1131c:	df000515 	stw	fp,20(sp)
   11320:	df000504 	addi	fp,sp,20
   11324:	e13fff15 	stw	r4,-4(fp)
   11328:	e17ffe15 	stw	r5,-8(fp)
   1132c:	e1bffd15 	stw	r6,-12(fp)
   11330:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11334:	e0800217 	ldw	r2,8(fp)
   11338:	d8800015 	stw	r2,0(sp)
   1133c:	e1fffc17 	ldw	r7,-16(fp)
   11340:	e1bffd17 	ldw	r6,-12(fp)
   11344:	e17ffe17 	ldw	r5,-8(fp)
   11348:	e13fff17 	ldw	r4,-4(fp)
   1134c:	00114c40 	call	114c4 <alt_iic_isr_register>
}  
   11350:	e037883a 	mov	sp,fp
   11354:	dfc00117 	ldw	ra,4(sp)
   11358:	df000017 	ldw	fp,0(sp)
   1135c:	dec00204 	addi	sp,sp,8
   11360:	f800283a 	ret

00011364 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11364:	defff904 	addi	sp,sp,-28
   11368:	df000615 	stw	fp,24(sp)
   1136c:	df000604 	addi	fp,sp,24
   11370:	e13ffb15 	stw	r4,-20(fp)
   11374:	e17ffa15 	stw	r5,-24(fp)
   11378:	e0bffa17 	ldw	r2,-24(fp)
   1137c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   11380:	0005303a 	rdctl	r2,status
   11384:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11388:	e0fffe17 	ldw	r3,-8(fp)
   1138c:	00bfff84 	movi	r2,-2
   11390:	1884703a 	and	r2,r3,r2
   11394:	1001703a 	wrctl	status,r2
  return context;
   11398:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1139c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   113a0:	00c00044 	movi	r3,1
   113a4:	e0bfff17 	ldw	r2,-4(fp)
   113a8:	1884983a 	sll	r2,r3,r2
   113ac:	1007883a 	mov	r3,r2
   113b0:	d0a0d317 	ldw	r2,-31924(gp)
   113b4:	1884b03a 	or	r2,r3,r2
   113b8:	d0a0d315 	stw	r2,-31924(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   113bc:	d0a0d317 	ldw	r2,-31924(gp)
   113c0:	100170fa 	wrctl	ienable,r2
   113c4:	e0bffd17 	ldw	r2,-12(fp)
   113c8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   113cc:	e0bffc17 	ldw	r2,-16(fp)
   113d0:	1001703a 	wrctl	status,r2
}
   113d4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   113d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   113dc:	e037883a 	mov	sp,fp
   113e0:	df000017 	ldw	fp,0(sp)
   113e4:	dec00104 	addi	sp,sp,4
   113e8:	f800283a 	ret

000113ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   113ec:	defff904 	addi	sp,sp,-28
   113f0:	df000615 	stw	fp,24(sp)
   113f4:	df000604 	addi	fp,sp,24
   113f8:	e13ffb15 	stw	r4,-20(fp)
   113fc:	e17ffa15 	stw	r5,-24(fp)
   11400:	e0bffa17 	ldw	r2,-24(fp)
   11404:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   11408:	0005303a 	rdctl	r2,status
   1140c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11410:	e0fffe17 	ldw	r3,-8(fp)
   11414:	00bfff84 	movi	r2,-2
   11418:	1884703a 	and	r2,r3,r2
   1141c:	1001703a 	wrctl	status,r2
  return context;
   11420:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   11424:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   11428:	00c00044 	movi	r3,1
   1142c:	e0bfff17 	ldw	r2,-4(fp)
   11430:	1884983a 	sll	r2,r3,r2
   11434:	0084303a 	nor	r2,zero,r2
   11438:	1007883a 	mov	r3,r2
   1143c:	d0a0d317 	ldw	r2,-31924(gp)
   11440:	1884703a 	and	r2,r3,r2
   11444:	d0a0d315 	stw	r2,-31924(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11448:	d0a0d317 	ldw	r2,-31924(gp)
   1144c:	100170fa 	wrctl	ienable,r2
   11450:	e0bffd17 	ldw	r2,-12(fp)
   11454:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   11458:	e0bffc17 	ldw	r2,-16(fp)
   1145c:	1001703a 	wrctl	status,r2
}
   11460:	0001883a 	nop
  return 0;
   11464:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   11468:	e037883a 	mov	sp,fp
   1146c:	df000017 	ldw	fp,0(sp)
   11470:	dec00104 	addi	sp,sp,4
   11474:	f800283a 	ret

00011478 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11478:	defffc04 	addi	sp,sp,-16
   1147c:	df000315 	stw	fp,12(sp)
   11480:	df000304 	addi	fp,sp,12
   11484:	e13ffe15 	stw	r4,-8(fp)
   11488:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1148c:	000530fa 	rdctl	r2,ienable
   11490:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11494:	00c00044 	movi	r3,1
   11498:	e0bffd17 	ldw	r2,-12(fp)
   1149c:	1884983a 	sll	r2,r3,r2
   114a0:	1007883a 	mov	r3,r2
   114a4:	e0bfff17 	ldw	r2,-4(fp)
   114a8:	1884703a 	and	r2,r3,r2
   114ac:	1004c03a 	cmpne	r2,r2,zero
   114b0:	10803fcc 	andi	r2,r2,255
}
   114b4:	e037883a 	mov	sp,fp
   114b8:	df000017 	ldw	fp,0(sp)
   114bc:	dec00104 	addi	sp,sp,4
   114c0:	f800283a 	ret

000114c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   114c4:	defff504 	addi	sp,sp,-44
   114c8:	dfc00a15 	stw	ra,40(sp)
   114cc:	df000915 	stw	fp,36(sp)
   114d0:	df000904 	addi	fp,sp,36
   114d4:	e13ffa15 	stw	r4,-24(fp)
   114d8:	e17ff915 	stw	r5,-28(fp)
   114dc:	e1bff815 	stw	r6,-32(fp)
   114e0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   114e4:	00bffa84 	movi	r2,-22
   114e8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   114ec:	e0bff917 	ldw	r2,-28(fp)
   114f0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   114f4:	e0bffe17 	ldw	r2,-8(fp)
   114f8:	10800808 	cmpgei	r2,r2,32
   114fc:	1000251e 	bne	r2,zero,11594 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   11500:	0005303a 	rdctl	r2,status
   11504:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11508:	e0fffc17 	ldw	r3,-16(fp)
   1150c:	00bfff84 	movi	r2,-2
   11510:	1884703a 	and	r2,r3,r2
   11514:	1001703a 	wrctl	status,r2
  return context;
   11518:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1151c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   11520:	e0bffe17 	ldw	r2,-8(fp)
   11524:	100890fa 	slli	r4,r2,3
   11528:	e0fff817 	ldw	r3,-32(fp)
   1152c:	00800074 	movhi	r2,1
   11530:	2085883a 	add	r2,r4,r2
   11534:	10ca1415 	stw	r3,10320(r2)
    alt_irq[id].context = isr_context;
   11538:	e0bffe17 	ldw	r2,-8(fp)
   1153c:	100890fa 	slli	r4,r2,3
   11540:	e0fff717 	ldw	r3,-36(fp)
   11544:	00800074 	movhi	r2,1
   11548:	2085883a 	add	r2,r4,r2
   1154c:	10ca1515 	stw	r3,10324(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11550:	e0bff817 	ldw	r2,-32(fp)
   11554:	10000526 	beq	r2,zero,1156c <alt_iic_isr_register+0xa8>
   11558:	e0bffe17 	ldw	r2,-8(fp)
   1155c:	100b883a 	mov	r5,r2
   11560:	e13ffa17 	ldw	r4,-24(fp)
   11564:	00113640 	call	11364 <alt_ic_irq_enable>
   11568:	00000406 	br	1157c <alt_iic_isr_register+0xb8>
   1156c:	e0bffe17 	ldw	r2,-8(fp)
   11570:	100b883a 	mov	r5,r2
   11574:	e13ffa17 	ldw	r4,-24(fp)
   11578:	00113ec0 	call	113ec <alt_ic_irq_disable>
   1157c:	e0bfff15 	stw	r2,-4(fp)
   11580:	e0bffd17 	ldw	r2,-12(fp)
   11584:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   11588:	e0bffb17 	ldw	r2,-20(fp)
   1158c:	1001703a 	wrctl	status,r2
}
   11590:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   11594:	e0bfff17 	ldw	r2,-4(fp)
}
   11598:	e037883a 	mov	sp,fp
   1159c:	dfc00117 	ldw	ra,4(sp)
   115a0:	df000017 	ldw	fp,0(sp)
   115a4:	dec00204 	addi	sp,sp,8
   115a8:	f800283a 	ret

000115ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   115ac:	defff904 	addi	sp,sp,-28
   115b0:	dfc00615 	stw	ra,24(sp)
   115b4:	df000515 	stw	fp,20(sp)
   115b8:	df000504 	addi	fp,sp,20
   115bc:	e13ffe15 	stw	r4,-8(fp)
   115c0:	e17ffd15 	stw	r5,-12(fp)
   115c4:	e1bffc15 	stw	r6,-16(fp)
   115c8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   115cc:	e1bffb17 	ldw	r6,-20(fp)
   115d0:	e17ffc17 	ldw	r5,-16(fp)
   115d4:	e13ffd17 	ldw	r4,-12(fp)
   115d8:	00117cc0 	call	117cc <open>
   115dc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   115e0:	e0bfff17 	ldw	r2,-4(fp)
   115e4:	10001716 	blt	r2,zero,11644 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   115e8:	e0bfff17 	ldw	r2,-4(fp)
   115ec:	10c00324 	muli	r3,r2,12
   115f0:	00800074 	movhi	r2,1
   115f4:	1885883a 	add	r2,r3,r2
   115f8:	10c8a317 	ldw	r3,8844(r2)
   115fc:	e0bffe17 	ldw	r2,-8(fp)
   11600:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11604:	e0bfff17 	ldw	r2,-4(fp)
   11608:	10c00324 	muli	r3,r2,12
   1160c:	00800074 	movhi	r2,1
   11610:	1885883a 	add	r2,r3,r2
   11614:	10c8a417 	ldw	r3,8848(r2)
   11618:	e0bffe17 	ldw	r2,-8(fp)
   1161c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11620:	e0bfff17 	ldw	r2,-4(fp)
   11624:	10c00324 	muli	r3,r2,12
   11628:	00800074 	movhi	r2,1
   1162c:	1885883a 	add	r2,r3,r2
   11630:	10c8a517 	ldw	r3,8852(r2)
   11634:	e0bffe17 	ldw	r2,-8(fp)
   11638:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1163c:	e13fff17 	ldw	r4,-4(fp)
   11640:	00119200 	call	11920 <alt_release_fd>
  }
} 
   11644:	0001883a 	nop
   11648:	e037883a 	mov	sp,fp
   1164c:	dfc00117 	ldw	ra,4(sp)
   11650:	df000017 	ldw	fp,0(sp)
   11654:	dec00204 	addi	sp,sp,8
   11658:	f800283a 	ret

0001165c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1165c:	defffb04 	addi	sp,sp,-20
   11660:	dfc00415 	stw	ra,16(sp)
   11664:	df000315 	stw	fp,12(sp)
   11668:	df000304 	addi	fp,sp,12
   1166c:	e13fff15 	stw	r4,-4(fp)
   11670:	e17ffe15 	stw	r5,-8(fp)
   11674:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11678:	01c07fc4 	movi	r7,511
   1167c:	01800044 	movi	r6,1
   11680:	e17fff17 	ldw	r5,-4(fp)
   11684:	01000074 	movhi	r4,1
   11688:	2108a604 	addi	r4,r4,8856
   1168c:	00115ac0 	call	115ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11690:	01c07fc4 	movi	r7,511
   11694:	000d883a 	mov	r6,zero
   11698:	e17ffe17 	ldw	r5,-8(fp)
   1169c:	01000074 	movhi	r4,1
   116a0:	2108a304 	addi	r4,r4,8844
   116a4:	00115ac0 	call	115ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   116a8:	01c07fc4 	movi	r7,511
   116ac:	01800044 	movi	r6,1
   116b0:	e17ffd17 	ldw	r5,-12(fp)
   116b4:	01000074 	movhi	r4,1
   116b8:	2108a904 	addi	r4,r4,8868
   116bc:	00115ac0 	call	115ac <alt_open_fd>
}  
   116c0:	0001883a 	nop
   116c4:	e037883a 	mov	sp,fp
   116c8:	dfc00117 	ldw	ra,4(sp)
   116cc:	df000017 	ldw	fp,0(sp)
   116d0:	dec00204 	addi	sp,sp,8
   116d4:	f800283a 	ret

000116d8 <alt_get_errno>:
{
   116d8:	defffe04 	addi	sp,sp,-8
   116dc:	dfc00115 	stw	ra,4(sp)
   116e0:	df000015 	stw	fp,0(sp)
   116e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   116e8:	d0a00517 	ldw	r2,-32748(gp)
   116ec:	10000326 	beq	r2,zero,116fc <alt_get_errno+0x24>
   116f0:	d0a00517 	ldw	r2,-32748(gp)
   116f4:	103ee83a 	callr	r2
   116f8:	00000106 	br	11700 <alt_get_errno+0x28>
   116fc:	d0a0d704 	addi	r2,gp,-31908
}
   11700:	e037883a 	mov	sp,fp
   11704:	dfc00117 	ldw	ra,4(sp)
   11708:	df000017 	ldw	fp,0(sp)
   1170c:	dec00204 	addi	sp,sp,8
   11710:	f800283a 	ret

00011714 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11714:	defffd04 	addi	sp,sp,-12
   11718:	df000215 	stw	fp,8(sp)
   1171c:	df000204 	addi	fp,sp,8
   11720:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11724:	e0bffe17 	ldw	r2,-8(fp)
   11728:	10800217 	ldw	r2,8(r2)
   1172c:	10d00034 	orhi	r3,r2,16384
   11730:	e0bffe17 	ldw	r2,-8(fp)
   11734:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11738:	e03fff15 	stw	zero,-4(fp)
   1173c:	00001a06 	br	117a8 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11740:	e0bfff17 	ldw	r2,-4(fp)
   11744:	10c00324 	muli	r3,r2,12
   11748:	00800074 	movhi	r2,1
   1174c:	1885883a 	add	r2,r3,r2
   11750:	10c8a317 	ldw	r3,8844(r2)
   11754:	e0bffe17 	ldw	r2,-8(fp)
   11758:	10800017 	ldw	r2,0(r2)
   1175c:	18800f1e 	bne	r3,r2,1179c <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11760:	e0bfff17 	ldw	r2,-4(fp)
   11764:	10c00324 	muli	r3,r2,12
   11768:	00800074 	movhi	r2,1
   1176c:	1885883a 	add	r2,r3,r2
   11770:	1088a517 	ldw	r2,8852(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   11774:	1000090e 	bge	r2,zero,1179c <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   11778:	e0bfff17 	ldw	r2,-4(fp)
   1177c:	10c00324 	muli	r3,r2,12
   11780:	00800074 	movhi	r2,1
   11784:	1088a304 	addi	r2,r2,8844
   11788:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1178c:	e0fffe17 	ldw	r3,-8(fp)
   11790:	18800226 	beq	r3,r2,1179c <alt_file_locked+0x88>
    {
      return -EACCES;
   11794:	00bffcc4 	movi	r2,-13
   11798:	00000806 	br	117bc <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   1179c:	e0bfff17 	ldw	r2,-4(fp)
   117a0:	10800044 	addi	r2,r2,1
   117a4:	e0bfff15 	stw	r2,-4(fp)
   117a8:	d0a00417 	ldw	r2,-32752(gp)
   117ac:	1007883a 	mov	r3,r2
   117b0:	e0bfff17 	ldw	r2,-4(fp)
   117b4:	18bfe22e 	bgeu	r3,r2,11740 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   117b8:	0005883a 	mov	r2,zero
}
   117bc:	e037883a 	mov	sp,fp
   117c0:	df000017 	ldw	fp,0(sp)
   117c4:	dec00104 	addi	sp,sp,4
   117c8:	f800283a 	ret

000117cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   117cc:	defff604 	addi	sp,sp,-40
   117d0:	dfc00915 	stw	ra,36(sp)
   117d4:	df000815 	stw	fp,32(sp)
   117d8:	df000804 	addi	fp,sp,32
   117dc:	e13ffa15 	stw	r4,-24(fp)
   117e0:	e17ff915 	stw	r5,-28(fp)
   117e4:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   117e8:	00bfffc4 	movi	r2,-1
   117ec:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   117f0:	00bffb44 	movi	r2,-19
   117f4:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   117f8:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   117fc:	d1600204 	addi	r5,gp,-32760
   11800:	e13ffa17 	ldw	r4,-24(fp)
   11804:	00112500 	call	11250 <alt_find_dev>
   11808:	e0bfff15 	stw	r2,-4(fp)
   1180c:	e0bfff17 	ldw	r2,-4(fp)
   11810:	1000051e 	bne	r2,zero,11828 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11814:	e13ffa17 	ldw	r4,-24(fp)
   11818:	0011b480 	call	11b48 <alt_find_file>
   1181c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   11820:	00800044 	movi	r2,1
   11824:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11828:	e0bfff17 	ldw	r2,-4(fp)
   1182c:	10002926 	beq	r2,zero,118d4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11830:	e13fff17 	ldw	r4,-4(fp)
   11834:	0011c500 	call	11c50 <alt_get_fd>
   11838:	e0bffe15 	stw	r2,-8(fp)
   1183c:	e0bffe17 	ldw	r2,-8(fp)
   11840:	1000030e 	bge	r2,zero,11850 <open+0x84>
    {
      status = index;
   11844:	e0bffe17 	ldw	r2,-8(fp)
   11848:	e0bffd15 	stw	r2,-12(fp)
   1184c:	00002306 	br	118dc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   11850:	e0bffe17 	ldw	r2,-8(fp)
   11854:	10c00324 	muli	r3,r2,12
   11858:	00800074 	movhi	r2,1
   1185c:	1088a304 	addi	r2,r2,8844
   11860:	1885883a 	add	r2,r3,r2
   11864:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11868:	e0fff917 	ldw	r3,-28(fp)
   1186c:	00900034 	movhi	r2,16384
   11870:	10bfffc4 	addi	r2,r2,-1
   11874:	1886703a 	and	r3,r3,r2
   11878:	e0bffb17 	ldw	r2,-20(fp)
   1187c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11880:	e0bffc17 	ldw	r2,-16(fp)
   11884:	1000051e 	bne	r2,zero,1189c <open+0xd0>
   11888:	e13ffb17 	ldw	r4,-20(fp)
   1188c:	00117140 	call	11714 <alt_file_locked>
   11890:	e0bffd15 	stw	r2,-12(fp)
   11894:	e0bffd17 	ldw	r2,-12(fp)
   11898:	10001016 	blt	r2,zero,118dc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1189c:	e0bfff17 	ldw	r2,-4(fp)
   118a0:	10800317 	ldw	r2,12(r2)
   118a4:	10000826 	beq	r2,zero,118c8 <open+0xfc>
   118a8:	e0bfff17 	ldw	r2,-4(fp)
   118ac:	10800317 	ldw	r2,12(r2)
   118b0:	e1fff817 	ldw	r7,-32(fp)
   118b4:	e1bff917 	ldw	r6,-28(fp)
   118b8:	e17ffa17 	ldw	r5,-24(fp)
   118bc:	e13ffb17 	ldw	r4,-20(fp)
   118c0:	103ee83a 	callr	r2
   118c4:	00000106 	br	118cc <open+0x100>
   118c8:	0005883a 	mov	r2,zero
   118cc:	e0bffd15 	stw	r2,-12(fp)
   118d0:	00000206 	br	118dc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   118d4:	00bffb44 	movi	r2,-19
   118d8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   118dc:	e0bffd17 	ldw	r2,-12(fp)
   118e0:	1000090e 	bge	r2,zero,11908 <open+0x13c>
  {
    alt_release_fd (index);  
   118e4:	e13ffe17 	ldw	r4,-8(fp)
   118e8:	00119200 	call	11920 <alt_release_fd>
    ALT_ERRNO = -status;
   118ec:	00116d80 	call	116d8 <alt_get_errno>
   118f0:	1007883a 	mov	r3,r2
   118f4:	e0bffd17 	ldw	r2,-12(fp)
   118f8:	0085c83a 	sub	r2,zero,r2
   118fc:	18800015 	stw	r2,0(r3)
    return -1;
   11900:	00bfffc4 	movi	r2,-1
   11904:	00000106 	br	1190c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11908:	e0bffe17 	ldw	r2,-8(fp)
}
   1190c:	e037883a 	mov	sp,fp
   11910:	dfc00117 	ldw	ra,4(sp)
   11914:	df000017 	ldw	fp,0(sp)
   11918:	dec00204 	addi	sp,sp,8
   1191c:	f800283a 	ret

00011920 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11920:	defffe04 	addi	sp,sp,-8
   11924:	df000115 	stw	fp,4(sp)
   11928:	df000104 	addi	fp,sp,4
   1192c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11930:	e0bfff17 	ldw	r2,-4(fp)
   11934:	108000d0 	cmplti	r2,r2,3
   11938:	10000a1e 	bne	r2,zero,11964 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   1193c:	e0bfff17 	ldw	r2,-4(fp)
   11940:	10c00324 	muli	r3,r2,12
   11944:	00800074 	movhi	r2,1
   11948:	1885883a 	add	r2,r3,r2
   1194c:	1008a515 	stw	zero,8852(r2)
    alt_fd_list[fd].dev      = 0;
   11950:	e0bfff17 	ldw	r2,-4(fp)
   11954:	10c00324 	muli	r3,r2,12
   11958:	00800074 	movhi	r2,1
   1195c:	1885883a 	add	r2,r3,r2
   11960:	1008a315 	stw	zero,8844(r2)
  }
}
   11964:	0001883a 	nop
   11968:	e037883a 	mov	sp,fp
   1196c:	df000017 	ldw	fp,0(sp)
   11970:	dec00104 	addi	sp,sp,4
   11974:	f800283a 	ret

00011978 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11978:	defffa04 	addi	sp,sp,-24
   1197c:	df000515 	stw	fp,20(sp)
   11980:	df000504 	addi	fp,sp,20
   11984:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   11988:	0005303a 	rdctl	r2,status
   1198c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11990:	e0fffc17 	ldw	r3,-16(fp)
   11994:	00bfff84 	movi	r2,-2
   11998:	1884703a 	and	r2,r3,r2
   1199c:	1001703a 	wrctl	status,r2
  return context;
   119a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   119a4:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   119a8:	e0bffb17 	ldw	r2,-20(fp)
   119ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   119b0:	e0bffd17 	ldw	r2,-12(fp)
   119b4:	10800017 	ldw	r2,0(r2)
   119b8:	e0fffd17 	ldw	r3,-12(fp)
   119bc:	18c00117 	ldw	r3,4(r3)
   119c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   119c4:	e0bffd17 	ldw	r2,-12(fp)
   119c8:	10800117 	ldw	r2,4(r2)
   119cc:	e0fffd17 	ldw	r3,-12(fp)
   119d0:	18c00017 	ldw	r3,0(r3)
   119d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   119d8:	e0bffd17 	ldw	r2,-12(fp)
   119dc:	e0fffd17 	ldw	r3,-12(fp)
   119e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   119e4:	e0bffd17 	ldw	r2,-12(fp)
   119e8:	e0fffd17 	ldw	r3,-12(fp)
   119ec:	10c00015 	stw	r3,0(r2)
} 
   119f0:	0001883a 	nop
   119f4:	e0bfff17 	ldw	r2,-4(fp)
   119f8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   119fc:	e0bffe17 	ldw	r2,-8(fp)
   11a00:	1001703a 	wrctl	status,r2
}
   11a04:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   11a08:	0001883a 	nop
   11a0c:	e037883a 	mov	sp,fp
   11a10:	df000017 	ldw	fp,0(sp)
   11a14:	dec00104 	addi	sp,sp,4
   11a18:	f800283a 	ret

00011a1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11a1c:	defffb04 	addi	sp,sp,-20
   11a20:	dfc00415 	stw	ra,16(sp)
   11a24:	df000315 	stw	fp,12(sp)
   11a28:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11a2c:	d0a00717 	ldw	r2,-32740(gp)
   11a30:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11a34:	d0a0d517 	ldw	r2,-31916(gp)
   11a38:	10800044 	addi	r2,r2,1
   11a3c:	d0a0d515 	stw	r2,-31916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a40:	00002e06 	br	11afc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11a44:	e0bfff17 	ldw	r2,-4(fp)
   11a48:	10800017 	ldw	r2,0(r2)
   11a4c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11a50:	e0bfff17 	ldw	r2,-4(fp)
   11a54:	10800403 	ldbu	r2,16(r2)
   11a58:	10803fcc 	andi	r2,r2,255
   11a5c:	10000426 	beq	r2,zero,11a70 <alt_tick+0x54>
   11a60:	d0a0d517 	ldw	r2,-31916(gp)
   11a64:	1000021e 	bne	r2,zero,11a70 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11a68:	e0bfff17 	ldw	r2,-4(fp)
   11a6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11a70:	e0bfff17 	ldw	r2,-4(fp)
   11a74:	10800217 	ldw	r2,8(r2)
   11a78:	d0e0d517 	ldw	r3,-31916(gp)
   11a7c:	18801d36 	bltu	r3,r2,11af4 <alt_tick+0xd8>
   11a80:	e0bfff17 	ldw	r2,-4(fp)
   11a84:	10800403 	ldbu	r2,16(r2)
   11a88:	10803fcc 	andi	r2,r2,255
   11a8c:	1000191e 	bne	r2,zero,11af4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11a90:	e0bfff17 	ldw	r2,-4(fp)
   11a94:	10800317 	ldw	r2,12(r2)
   11a98:	e0ffff17 	ldw	r3,-4(fp)
   11a9c:	18c00517 	ldw	r3,20(r3)
   11aa0:	1809883a 	mov	r4,r3
   11aa4:	103ee83a 	callr	r2
   11aa8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11aac:	e0bffd17 	ldw	r2,-12(fp)
   11ab0:	1000031e 	bne	r2,zero,11ac0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11ab4:	e13fff17 	ldw	r4,-4(fp)
   11ab8:	00119780 	call	11978 <alt_alarm_stop>
   11abc:	00000d06 	br	11af4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11ac0:	e0bfff17 	ldw	r2,-4(fp)
   11ac4:	10c00217 	ldw	r3,8(r2)
   11ac8:	e0bffd17 	ldw	r2,-12(fp)
   11acc:	1887883a 	add	r3,r3,r2
   11ad0:	e0bfff17 	ldw	r2,-4(fp)
   11ad4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11ad8:	e0bfff17 	ldw	r2,-4(fp)
   11adc:	10c00217 	ldw	r3,8(r2)
   11ae0:	d0a0d517 	ldw	r2,-31916(gp)
   11ae4:	1880032e 	bgeu	r3,r2,11af4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11ae8:	e0bfff17 	ldw	r2,-4(fp)
   11aec:	00c00044 	movi	r3,1
   11af0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11af4:	e0bffe17 	ldw	r2,-8(fp)
   11af8:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   11afc:	e0ffff17 	ldw	r3,-4(fp)
   11b00:	d0a00704 	addi	r2,gp,-32740
   11b04:	18bfcf1e 	bne	r3,r2,11a44 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11b08:	0001883a 	nop
}
   11b0c:	0001883a 	nop
   11b10:	e037883a 	mov	sp,fp
   11b14:	dfc00117 	ldw	ra,4(sp)
   11b18:	df000017 	ldw	fp,0(sp)
   11b1c:	dec00204 	addi	sp,sp,8
   11b20:	f800283a 	ret

00011b24 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11b24:	deffff04 	addi	sp,sp,-4
   11b28:	df000015 	stw	fp,0(sp)
   11b2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11b30:	000170fa 	wrctl	ienable,zero
}
   11b34:	0001883a 	nop
   11b38:	e037883a 	mov	sp,fp
   11b3c:	df000017 	ldw	fp,0(sp)
   11b40:	dec00104 	addi	sp,sp,4
   11b44:	f800283a 	ret

00011b48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11b48:	defffb04 	addi	sp,sp,-20
   11b4c:	dfc00415 	stw	ra,16(sp)
   11b50:	df000315 	stw	fp,12(sp)
   11b54:	df000304 	addi	fp,sp,12
   11b58:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11b5c:	d0a00017 	ldw	r2,-32768(gp)
   11b60:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11b64:	00003106 	br	11c2c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11b68:	e0bfff17 	ldw	r2,-4(fp)
   11b6c:	10800217 	ldw	r2,8(r2)
   11b70:	1009883a 	mov	r4,r2
   11b74:	0011e680 	call	11e68 <strlen>
   11b78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11b7c:	e0bfff17 	ldw	r2,-4(fp)
   11b80:	10c00217 	ldw	r3,8(r2)
   11b84:	e0bffe17 	ldw	r2,-8(fp)
   11b88:	10bfffc4 	addi	r2,r2,-1
   11b8c:	1885883a 	add	r2,r3,r2
   11b90:	10800003 	ldbu	r2,0(r2)
   11b94:	10803fcc 	andi	r2,r2,255
   11b98:	1080201c 	xori	r2,r2,128
   11b9c:	10bfe004 	addi	r2,r2,-128
   11ba0:	10800bd8 	cmpnei	r2,r2,47
   11ba4:	1000031e 	bne	r2,zero,11bb4 <alt_find_file+0x6c>
    {
      len -= 1;
   11ba8:	e0bffe17 	ldw	r2,-8(fp)
   11bac:	10bfffc4 	addi	r2,r2,-1
   11bb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11bb4:	e0bffe17 	ldw	r2,-8(fp)
   11bb8:	e0fffd17 	ldw	r3,-12(fp)
   11bbc:	1885883a 	add	r2,r3,r2
   11bc0:	10800003 	ldbu	r2,0(r2)
   11bc4:	10803fcc 	andi	r2,r2,255
   11bc8:	1080201c 	xori	r2,r2,128
   11bcc:	10bfe004 	addi	r2,r2,-128
   11bd0:	10800be0 	cmpeqi	r2,r2,47
   11bd4:	1000081e 	bne	r2,zero,11bf8 <alt_find_file+0xb0>
   11bd8:	e0bffe17 	ldw	r2,-8(fp)
   11bdc:	e0fffd17 	ldw	r3,-12(fp)
   11be0:	1885883a 	add	r2,r3,r2
   11be4:	10800003 	ldbu	r2,0(r2)
   11be8:	10803fcc 	andi	r2,r2,255
   11bec:	1080201c 	xori	r2,r2,128
   11bf0:	10bfe004 	addi	r2,r2,-128
   11bf4:	10000a1e 	bne	r2,zero,11c20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11bf8:	e0bfff17 	ldw	r2,-4(fp)
   11bfc:	10800217 	ldw	r2,8(r2)
   11c00:	e0fffe17 	ldw	r3,-8(fp)
   11c04:	180d883a 	mov	r6,r3
   11c08:	e17ffd17 	ldw	r5,-12(fp)
   11c0c:	1009883a 	mov	r4,r2
   11c10:	0011e380 	call	11e38 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   11c14:	1000021e 	bne	r2,zero,11c20 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   11c18:	e0bfff17 	ldw	r2,-4(fp)
   11c1c:	00000706 	br	11c3c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11c20:	e0bfff17 	ldw	r2,-4(fp)
   11c24:	10800017 	ldw	r2,0(r2)
   11c28:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   11c2c:	e0ffff17 	ldw	r3,-4(fp)
   11c30:	d0a00004 	addi	r2,gp,-32768
   11c34:	18bfcc1e 	bne	r3,r2,11b68 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   11c38:	0005883a 	mov	r2,zero
}
   11c3c:	e037883a 	mov	sp,fp
   11c40:	dfc00117 	ldw	ra,4(sp)
   11c44:	df000017 	ldw	fp,0(sp)
   11c48:	dec00204 	addi	sp,sp,8
   11c4c:	f800283a 	ret

00011c50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11c50:	defffc04 	addi	sp,sp,-16
   11c54:	df000315 	stw	fp,12(sp)
   11c58:	df000304 	addi	fp,sp,12
   11c5c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   11c60:	00bffa04 	movi	r2,-24
   11c64:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11c68:	e03fff15 	stw	zero,-4(fp)
   11c6c:	00001706 	br	11ccc <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   11c70:	e0bfff17 	ldw	r2,-4(fp)
   11c74:	10c00324 	muli	r3,r2,12
   11c78:	00800074 	movhi	r2,1
   11c7c:	1885883a 	add	r2,r3,r2
   11c80:	1088a317 	ldw	r2,8844(r2)
   11c84:	10000e1e 	bne	r2,zero,11cc0 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   11c88:	e0bfff17 	ldw	r2,-4(fp)
   11c8c:	11000324 	muli	r4,r2,12
   11c90:	e0fffd17 	ldw	r3,-12(fp)
   11c94:	00800074 	movhi	r2,1
   11c98:	2085883a 	add	r2,r4,r2
   11c9c:	10c8a315 	stw	r3,8844(r2)
      if (i > alt_max_fd)
   11ca0:	d0e00417 	ldw	r3,-32752(gp)
   11ca4:	e0bfff17 	ldw	r2,-4(fp)
   11ca8:	1880020e 	bge	r3,r2,11cb4 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   11cac:	e0bfff17 	ldw	r2,-4(fp)
   11cb0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   11cb4:	e0bfff17 	ldw	r2,-4(fp)
   11cb8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11cbc:	00000706 	br	11cdc <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   11cc0:	e0bfff17 	ldw	r2,-4(fp)
   11cc4:	10800044 	addi	r2,r2,1
   11cc8:	e0bfff15 	stw	r2,-4(fp)
   11ccc:	e0bfff17 	ldw	r2,-4(fp)
   11cd0:	10800810 	cmplti	r2,r2,32
   11cd4:	103fe61e 	bne	r2,zero,11c70 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   11cd8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11cdc:	e0bffe17 	ldw	r2,-8(fp)
}
   11ce0:	e037883a 	mov	sp,fp
   11ce4:	df000017 	ldw	fp,0(sp)
   11ce8:	dec00104 	addi	sp,sp,4
   11cec:	f800283a 	ret

00011cf0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11cf0:	defffb04 	addi	sp,sp,-20
   11cf4:	df000415 	stw	fp,16(sp)
   11cf8:	df000404 	addi	fp,sp,16
   11cfc:	e13ffd15 	stw	r4,-12(fp)
   11d00:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11d04:	e0bffc17 	ldw	r2,-16(fp)
   11d08:	10820070 	cmpltui	r2,r2,2049
   11d0c:	1000021e 	bne	r2,zero,11d18 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11d10:	00820004 	movi	r2,2048
   11d14:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   11d18:	e0fffd17 	ldw	r3,-12(fp)
   11d1c:	e0bffc17 	ldw	r2,-16(fp)
   11d20:	1885883a 	add	r2,r3,r2
   11d24:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11d28:	e0bffd17 	ldw	r2,-12(fp)
   11d2c:	e0bfff15 	stw	r2,-4(fp)
   11d30:	00000506 	br	11d48 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11d34:	e0bfff17 	ldw	r2,-4(fp)
   11d38:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11d3c:	e0bfff17 	ldw	r2,-4(fp)
   11d40:	10800804 	addi	r2,r2,32
   11d44:	e0bfff15 	stw	r2,-4(fp)
   11d48:	e0ffff17 	ldw	r3,-4(fp)
   11d4c:	e0bffe17 	ldw	r2,-8(fp)
   11d50:	18bff836 	bltu	r3,r2,11d34 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11d54:	e0bffd17 	ldw	r2,-12(fp)
   11d58:	108007cc 	andi	r2,r2,31
   11d5c:	10000226 	beq	r2,zero,11d68 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11d60:	e0bfff17 	ldw	r2,-4(fp)
   11d64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11d68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11d6c:	0001883a 	nop
   11d70:	e037883a 	mov	sp,fp
   11d74:	df000017 	ldw	fp,0(sp)
   11d78:	dec00104 	addi	sp,sp,4
   11d7c:	f800283a 	ret

00011d80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11d80:	defffe04 	addi	sp,sp,-8
   11d84:	df000115 	stw	fp,4(sp)
   11d88:	df000104 	addi	fp,sp,4
   11d8c:	e13fff15 	stw	r4,-4(fp)
   11d90:	e0bfff17 	ldw	r2,-4(fp)
   11d94:	10bffe84 	addi	r2,r2,-6
   11d98:	10c00428 	cmpgeui	r3,r2,16
   11d9c:	1800191e 	bne	r3,zero,11e04 <alt_exception_cause_generated_bad_addr+0x84>
   11da0:	100690ba 	slli	r3,r2,2
   11da4:	00800074 	movhi	r2,1
   11da8:	1885883a 	add	r2,r3,r2
   11dac:	10876d17 	ldw	r2,7604(r2)
   11db0:	1000683a 	jmp	r2
   11db4:	00011df4 	movhi	zero,1143
   11db8:	00011df4 	movhi	zero,1143
   11dbc:	00011e04 	movi	zero,1144
   11dc0:	00011e04 	movi	zero,1144
   11dc4:	00011e04 	movi	zero,1144
   11dc8:	00011df4 	movhi	zero,1143
   11dcc:	00011dfc 	xorhi	zero,zero,1143
   11dd0:	00011e04 	movi	zero,1144
   11dd4:	00011df4 	movhi	zero,1143
   11dd8:	00011df4 	movhi	zero,1143
   11ddc:	00011e04 	movi	zero,1144
   11de0:	00011df4 	movhi	zero,1143
   11de4:	00011dfc 	xorhi	zero,zero,1143
   11de8:	00011e04 	movi	zero,1144
   11dec:	00011e04 	movi	zero,1144
   11df0:	00011df4 	movhi	zero,1143
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11df4:	00800044 	movi	r2,1
   11df8:	00000306 	br	11e08 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11dfc:	0005883a 	mov	r2,zero
   11e00:	00000106 	br	11e08 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   11e04:	0005883a 	mov	r2,zero
  }
}
   11e08:	e037883a 	mov	sp,fp
   11e0c:	df000017 	ldw	fp,0(sp)
   11e10:	dec00104 	addi	sp,sp,4
   11e14:	f800283a 	ret

00011e18 <exit>:
   11e18:	defffe04 	addi	sp,sp,-8
   11e1c:	000b883a 	mov	r5,zero
   11e20:	dc000015 	stw	r16,0(sp)
   11e24:	dfc00115 	stw	ra,4(sp)
   11e28:	2021883a 	mov	r16,r4
   11e2c:	0011e840 	call	11e84 <__call_exitprocs>
   11e30:	8009883a 	mov	r4,r16
   11e34:	00121640 	call	12164 <_exit>

00011e38 <memcmp>:
   11e38:	0007883a 	mov	r3,zero
   11e3c:	30c0021e 	bne	r6,r3,11e48 <memcmp+0x10>
   11e40:	0005883a 	mov	r2,zero
   11e44:	f800283a 	ret
   11e48:	20c5883a 	add	r2,r4,r3
   11e4c:	18c00044 	addi	r3,r3,1
   11e50:	28cf883a 	add	r7,r5,r3
   11e54:	10800003 	ldbu	r2,0(r2)
   11e58:	39ffffc3 	ldbu	r7,-1(r7)
   11e5c:	11fff726 	beq	r2,r7,11e3c <memcmp+0x4>
   11e60:	11c5c83a 	sub	r2,r2,r7
   11e64:	f800283a 	ret

00011e68 <strlen>:
   11e68:	2005883a 	mov	r2,r4
   11e6c:	10c00007 	ldb	r3,0(r2)
   11e70:	1800021e 	bne	r3,zero,11e7c <strlen+0x14>
   11e74:	1105c83a 	sub	r2,r2,r4
   11e78:	f800283a 	ret
   11e7c:	10800044 	addi	r2,r2,1
   11e80:	003ffa06 	br	11e6c <strlen+0x4>

00011e84 <__call_exitprocs>:
   11e84:	defff604 	addi	sp,sp,-40
   11e88:	00800074 	movhi	r2,1
   11e8c:	dd800615 	stw	r22,24(sp)
   11e90:	15894517 	ldw	r22,9492(r2)
   11e94:	dd400515 	stw	r21,20(sp)
   11e98:	dd000415 	stw	r20,16(sp)
   11e9c:	dfc00915 	stw	ra,36(sp)
   11ea0:	df000815 	stw	fp,32(sp)
   11ea4:	ddc00715 	stw	r23,28(sp)
   11ea8:	dcc00315 	stw	r19,12(sp)
   11eac:	dc800215 	stw	r18,8(sp)
   11eb0:	dc400115 	stw	r17,4(sp)
   11eb4:	dc000015 	stw	r16,0(sp)
   11eb8:	202b883a 	mov	r21,r4
   11ebc:	2829883a 	mov	r20,r5
   11ec0:	b4400d17 	ldw	r17,52(r22)
   11ec4:	88000726 	beq	r17,zero,11ee4 <__call_exitprocs+0x60>
   11ec8:	8c000117 	ldw	r16,4(r17)
   11ecc:	8cc02217 	ldw	r19,136(r17)
   11ed0:	84bfffc4 	addi	r18,r16,-1
   11ed4:	802090ba 	slli	r16,r16,2
   11ed8:	9c2f883a 	add	r23,r19,r16
   11edc:	8c21883a 	add	r16,r17,r16
   11ee0:	90000c0e 	bge	r18,zero,11f14 <__call_exitprocs+0x90>
   11ee4:	dfc00917 	ldw	ra,36(sp)
   11ee8:	df000817 	ldw	fp,32(sp)
   11eec:	ddc00717 	ldw	r23,28(sp)
   11ef0:	dd800617 	ldw	r22,24(sp)
   11ef4:	dd400517 	ldw	r21,20(sp)
   11ef8:	dd000417 	ldw	r20,16(sp)
   11efc:	dcc00317 	ldw	r19,12(sp)
   11f00:	dc800217 	ldw	r18,8(sp)
   11f04:	dc400117 	ldw	r17,4(sp)
   11f08:	dc000017 	ldw	r16,0(sp)
   11f0c:	dec00a04 	addi	sp,sp,40
   11f10:	f800283a 	ret
   11f14:	a0000726 	beq	r20,zero,11f34 <__call_exitprocs+0xb0>
   11f18:	9800041e 	bne	r19,zero,11f2c <__call_exitprocs+0xa8>
   11f1c:	94bfffc4 	addi	r18,r18,-1
   11f20:	bdffff04 	addi	r23,r23,-4
   11f24:	843fff04 	addi	r16,r16,-4
   11f28:	003fed06 	br	11ee0 <__call_exitprocs+0x5c>
   11f2c:	b8c01f17 	ldw	r3,124(r23)
   11f30:	1d3ffa1e 	bne	r3,r20,11f1c <__call_exitprocs+0x98>
   11f34:	89000117 	ldw	r4,4(r17)
   11f38:	80c00117 	ldw	r3,4(r16)
   11f3c:	213fffc4 	addi	r4,r4,-1
   11f40:	24800f1e 	bne	r4,r18,11f80 <__call_exitprocs+0xfc>
   11f44:	8c800115 	stw	r18,4(r17)
   11f48:	183ff426 	beq	r3,zero,11f1c <__call_exitprocs+0x98>
   11f4c:	8f000117 	ldw	fp,4(r17)
   11f50:	98000526 	beq	r19,zero,11f68 <__call_exitprocs+0xe4>
   11f54:	00800044 	movi	r2,1
   11f58:	148c983a 	sll	r6,r2,r18
   11f5c:	99004017 	ldw	r4,256(r19)
   11f60:	3108703a 	and	r4,r6,r4
   11f64:	2000081e 	bne	r4,zero,11f88 <__call_exitprocs+0x104>
   11f68:	183ee83a 	callr	r3
   11f6c:	89000117 	ldw	r4,4(r17)
   11f70:	b0c00d17 	ldw	r3,52(r22)
   11f74:	273fd21e 	bne	r4,fp,11ec0 <__call_exitprocs+0x3c>
   11f78:	88ffe826 	beq	r17,r3,11f1c <__call_exitprocs+0x98>
   11f7c:	003fd006 	br	11ec0 <__call_exitprocs+0x3c>
   11f80:	80000115 	stw	zero,4(r16)
   11f84:	003ff006 	br	11f48 <__call_exitprocs+0xc4>
   11f88:	99404117 	ldw	r5,260(r19)
   11f8c:	b93fff17 	ldw	r4,-4(r23)
   11f90:	314c703a 	and	r6,r6,r5
   11f94:	3000041e 	bne	r6,zero,11fa8 <__call_exitprocs+0x124>
   11f98:	200b883a 	mov	r5,r4
   11f9c:	a809883a 	mov	r4,r21
   11fa0:	183ee83a 	callr	r3
   11fa4:	003ff106 	br	11f6c <__call_exitprocs+0xe8>
   11fa8:	183ee83a 	callr	r3
   11fac:	003fef06 	br	11f6c <__call_exitprocs+0xe8>

00011fb0 <__divsi3>:
   11fb0:	20001a16 	blt	r4,zero,1201c <__divsi3+0x6c>
   11fb4:	000f883a 	mov	r7,zero
   11fb8:	2800020e 	bge	r5,zero,11fc4 <__divsi3+0x14>
   11fbc:	014bc83a 	sub	r5,zero,r5
   11fc0:	39c0005c 	xori	r7,r7,1
   11fc4:	200d883a 	mov	r6,r4
   11fc8:	00c00044 	movi	r3,1
   11fcc:	2900092e 	bgeu	r5,r4,11ff4 <__divsi3+0x44>
   11fd0:	00800804 	movi	r2,32
   11fd4:	00c00044 	movi	r3,1
   11fd8:	00000106 	br	11fe0 <__divsi3+0x30>
   11fdc:	10001226 	beq	r2,zero,12028 <__divsi3+0x78>
   11fe0:	294b883a 	add	r5,r5,r5
   11fe4:	10bfffc4 	addi	r2,r2,-1
   11fe8:	18c7883a 	add	r3,r3,r3
   11fec:	293ffb36 	bltu	r5,r4,11fdc <__divsi3+0x2c>
   11ff0:	18000d26 	beq	r3,zero,12028 <__divsi3+0x78>
   11ff4:	0005883a 	mov	r2,zero
   11ff8:	31400236 	bltu	r6,r5,12004 <__divsi3+0x54>
   11ffc:	314dc83a 	sub	r6,r6,r5
   12000:	10c4b03a 	or	r2,r2,r3
   12004:	1806d07a 	srli	r3,r3,1
   12008:	280ad07a 	srli	r5,r5,1
   1200c:	183ffa1e 	bne	r3,zero,11ff8 <__divsi3+0x48>
   12010:	38000126 	beq	r7,zero,12018 <__divsi3+0x68>
   12014:	0085c83a 	sub	r2,zero,r2
   12018:	f800283a 	ret
   1201c:	0109c83a 	sub	r4,zero,r4
   12020:	01c00044 	movi	r7,1
   12024:	003fe406 	br	11fb8 <__divsi3+0x8>
   12028:	0005883a 	mov	r2,zero
   1202c:	003ff806 	br	12010 <__divsi3+0x60>

00012030 <__modsi3>:
   12030:	20001916 	blt	r4,zero,12098 <__modsi3+0x68>
   12034:	000f883a 	mov	r7,zero
   12038:	2005883a 	mov	r2,r4
   1203c:	2800010e 	bge	r5,zero,12044 <__modsi3+0x14>
   12040:	014bc83a 	sub	r5,zero,r5
   12044:	00c00044 	movi	r3,1
   12048:	2900092e 	bgeu	r5,r4,12070 <__modsi3+0x40>
   1204c:	01800804 	movi	r6,32
   12050:	00c00044 	movi	r3,1
   12054:	00000106 	br	1205c <__modsi3+0x2c>
   12058:	30000d26 	beq	r6,zero,12090 <__modsi3+0x60>
   1205c:	294b883a 	add	r5,r5,r5
   12060:	31bfffc4 	addi	r6,r6,-1
   12064:	18c7883a 	add	r3,r3,r3
   12068:	293ffb36 	bltu	r5,r4,12058 <__modsi3+0x28>
   1206c:	18000826 	beq	r3,zero,12090 <__modsi3+0x60>
   12070:	1806d07a 	srli	r3,r3,1
   12074:	11400136 	bltu	r2,r5,1207c <__modsi3+0x4c>
   12078:	1145c83a 	sub	r2,r2,r5
   1207c:	280ad07a 	srli	r5,r5,1
   12080:	183ffb1e 	bne	r3,zero,12070 <__modsi3+0x40>
   12084:	38000126 	beq	r7,zero,1208c <__modsi3+0x5c>
   12088:	0085c83a 	sub	r2,zero,r2
   1208c:	f800283a 	ret
   12090:	2005883a 	mov	r2,r4
   12094:	003ffb06 	br	12084 <__modsi3+0x54>
   12098:	0109c83a 	sub	r4,zero,r4
   1209c:	01c00044 	movi	r7,1
   120a0:	003fe506 	br	12038 <__modsi3+0x8>

000120a4 <__udivsi3>:
   120a4:	200d883a 	mov	r6,r4
   120a8:	2900152e 	bgeu	r5,r4,12100 <__udivsi3+0x5c>
   120ac:	28001416 	blt	r5,zero,12100 <__udivsi3+0x5c>
   120b0:	00800804 	movi	r2,32
   120b4:	00c00044 	movi	r3,1
   120b8:	00000206 	br	120c4 <__udivsi3+0x20>
   120bc:	10000e26 	beq	r2,zero,120f8 <__udivsi3+0x54>
   120c0:	28000516 	blt	r5,zero,120d8 <__udivsi3+0x34>
   120c4:	294b883a 	add	r5,r5,r5
   120c8:	10bfffc4 	addi	r2,r2,-1
   120cc:	18c7883a 	add	r3,r3,r3
   120d0:	293ffa36 	bltu	r5,r4,120bc <__udivsi3+0x18>
   120d4:	18000826 	beq	r3,zero,120f8 <__udivsi3+0x54>
   120d8:	0005883a 	mov	r2,zero
   120dc:	31400236 	bltu	r6,r5,120e8 <__udivsi3+0x44>
   120e0:	314dc83a 	sub	r6,r6,r5
   120e4:	10c4b03a 	or	r2,r2,r3
   120e8:	1806d07a 	srli	r3,r3,1
   120ec:	280ad07a 	srli	r5,r5,1
   120f0:	183ffa1e 	bne	r3,zero,120dc <__udivsi3+0x38>
   120f4:	f800283a 	ret
   120f8:	0005883a 	mov	r2,zero
   120fc:	f800283a 	ret
   12100:	00c00044 	movi	r3,1
   12104:	003ff406 	br	120d8 <__udivsi3+0x34>

00012108 <__umodsi3>:
   12108:	2005883a 	mov	r2,r4
   1210c:	2900132e 	bgeu	r5,r4,1215c <__umodsi3+0x54>
   12110:	28001216 	blt	r5,zero,1215c <__umodsi3+0x54>
   12114:	01800804 	movi	r6,32
   12118:	00c00044 	movi	r3,1
   1211c:	00000206 	br	12128 <__umodsi3+0x20>
   12120:	30000c26 	beq	r6,zero,12154 <__umodsi3+0x4c>
   12124:	28000516 	blt	r5,zero,1213c <__umodsi3+0x34>
   12128:	294b883a 	add	r5,r5,r5
   1212c:	31bfffc4 	addi	r6,r6,-1
   12130:	18c7883a 	add	r3,r3,r3
   12134:	293ffa36 	bltu	r5,r4,12120 <__umodsi3+0x18>
   12138:	18000626 	beq	r3,zero,12154 <__umodsi3+0x4c>
   1213c:	1806d07a 	srli	r3,r3,1
   12140:	11400136 	bltu	r2,r5,12148 <__umodsi3+0x40>
   12144:	1145c83a 	sub	r2,r2,r5
   12148:	280ad07a 	srli	r5,r5,1
   1214c:	183ffb1e 	bne	r3,zero,1213c <__umodsi3+0x34>
   12150:	f800283a 	ret
   12154:	2005883a 	mov	r2,r4
   12158:	f800283a 	ret
   1215c:	00c00044 	movi	r3,1
   12160:	003ff606 	br	1213c <__umodsi3+0x34>

00012164 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12164:	defffd04 	addi	sp,sp,-12
   12168:	df000215 	stw	fp,8(sp)
   1216c:	df000204 	addi	fp,sp,8
   12170:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12174:	0001883a 	nop
   12178:	e0bffe17 	ldw	r2,-8(fp)
   1217c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12180:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12184:	10000226 	beq	r2,zero,12190 <_exit+0x2c>
    ALT_SIM_FAIL();
   12188:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   1218c:	00000106 	br	12194 <_exit+0x30>
    ALT_SIM_PASS();
   12190:	002af0b0 	cmpltui	zero,zero,43970
}
   12194:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12198:	003fff06 	br	12198 <_exit+0x34>
